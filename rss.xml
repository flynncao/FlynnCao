<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Majimay与ザ・ワールド</title>
        <link>https://flynncao.uk/</link>
        <description>这个用户很懒，什么描述都没写。</description>
        <lastBuildDate>Fri, 19 Sep 2025 10:11:12 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Astro-Theme-Retypeset with Feed for Node.js</generator>
        <language>zh</language>
        <copyright>Copyright © 2025 Flynn Cao</copyright>
        <atom:link href="https://flynncao.uk/rss.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[从词元化到Transformer中的注意力机制]]></title>
            <link>https://flynncao.uk/posts/from-a-tokenized-word-to-attention-mechanism-in-transformers/</link>
            <guid isPermaLink="false">https://flynncao.uk/posts/from-a-tokenized-word-to-attention-mechanism-in-transformers/</guid>
            <pubDate>Wed, 03 Sep 2025 15:59:36 GMT</pubDate>
            <description><![CDATA[最近我正在学习Transformer的基础知识。如果你和我一样——在这个看似崭新的领域里挣扎，或是被细节搞得头疼——但仍想为下一个ASR/N...]]></description>
            <content:encoded><![CDATA[<p>最近我正在学习Transformer的基础知识。如果你和我一样——在这个看似崭新的领域里挣扎，或是被细节搞得头疼——但仍想为下一个ASR/NLP项目收集灵感并稍作理解机制，那么这篇文章正适合你。我不擅长数学，因此会尝试用简单的方式解释。</p>
<p><a href="/en/posts/from-a-tokenized-word-to-attention-mechanism-in-transformersen/">原文</a></p>
<h1>介绍</h1>
<p>注意力机制出现在Transformer的多个部分。目前，我将重点放在编码层内部的机制。</p>
<p><img src="https://cfr2-img.flynncao.uk/202509022317902.png" alt="" /></p>
<p>暂时忘掉这张图。我们来谈谈句子中的<strong>语义</strong>："我在桌子上吃面包。" (I eat bread on the table) 作为英语学习者，你大概能感觉到这些词之间的关系。例如：</p>
<ul>
<li>"eat"与"bread"的相关性高于与"桌子"，因为我是正常人，尽管从技术上讲桌子也能吃</li>
<li>"bread"与"table"存在某种关联，因为</li>
<li>"I"与两者都有关系，但在这个句子中，动词"eat"和宾语"bread"比"bread"和"table"更重要。去掉"table"句子仍然成立</li>
<li>"I"与自身存在关联</li>
</ul>
<p>现在仅选取"eat"、"bread"和"table"来观察它们之间的关系。我们将跳过词元化过程，将每个单词视为一个词元（故下文中的"token"= "单词"，"句子"指输入序列）。</p>
<h2>预备知识：NumPy中的线性代数</h2>
<p>为找出词元间的关系，我将通过计算每个词元间的注意力分数来模拟这个过程。这需要一些线性代数基础。你不需要深入数学原理，但应该知道如何使用。</p>
<p>线性代数是处理向量和矩阵的数学分支。在Python中，我们可以使用numpy库执行线性代数运算。以下是<code>numpy</code>处理基础线性代数任务的简单示例：</p>
<ul>
<li>点积（一维数组）</li>
</ul>
<pre><code>import numpy as np
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
c = np.multiply(a, b)
print(c) # -&gt; 1*4 + 2*5 + 3*6 = 32 
print(a@b) # -&gt; 1*4 + 2*5 + 3*6 = 32 
</code></pre>
<ul>
<li>矩阵乘法（二维数组）</li>
</ul>
<pre><code>A = np.array([[1, 2],
              [3, 4]])

B = np.array([[5, 6],
              [7, 8]])
C = A @ B
print("A:\n", A)
print("B:\n", B)
print("A @ B:\n", C) # -&gt;  [[19 22] [43 50]]
</code></pre>
<p>以上就是后续章节所需的全部知识。</p>
<blockquote>
<p>你不需要打开IDE进行计算，只需在终端输入<code>python</code>即可获得Python交互环境。</p>
</blockquote>
<h2>词元化与编码</h2>
<p>众所周知，句子中的每个单词都与其他单词存在某种关联。例如在"我吃面包而不是桌子"这句话中，"吃"显然与"面包"的关联度高于"桌子"。但如何从数学和计算角度衡量这些关系呢？</p>
<p>在原始Transformer论文中，定义了<code>d_model=512</code>作为模型的维度。该维度用于描述词嵌入——包含单词特征（如身份标识、上下文、句法角色和语义）的向量表示（我将在其他文章中详细解释）。</p>
<p>但词嵌入本身无法捕获词语的上下文关系，尤其是在像Transformer编码器这样的非自回归模型中（并行处理输入序列，而非像RNN那样逐步或序列接续处理）。Transformer中的词元通过相互"关注"建立联系，我们称之为"成对注意力"（或自注意力）。<img src="https://cfr2-img.flynncao.uk/202509022354178.png" alt="" /></p>
<p>为简化起见，我们将从示例矩阵入手，设 d_model=4。（实际应用中维度可能为8，但在引入多头机制前，我们将持续使用 d_model=4。）同时设定 <code>tokens=3</code> 以代表句子中的3个单词（此处假设 $1token=1单词$），每个单词具有三个不同的特征。假设已完成位置编码等预处理步骤，则使用一个形状为 $(3,4)$ 的 $X$ 矩阵来表示这三个编码后的词元。</p>
<p>$$X=\begin{bmatrix}1&amp;0&amp;1&amp;0\0&amp;2&amp;0&amp;2\1&amp;1&amp;1&amp;1\end{bmatrix}$$</p>
<blockquote>
<p>每行代表1个词元</p>
</blockquote>
<h2>自注意力机制</h2>
<h3>Q, K, V（它们是什么？）</h3>
<p>通过词嵌入和位置编码中的余弦相似度，我们已了解单词在句子中的特性及其位置关系。但由于仍需以自回归方式处理词元（如您所知，大语言模型逐词生成句子），若不知如何预测下一个词元，便无法预先训练词元间的关系。此时注意力得分便发挥作用。</p>
<p>==完整的注意力得分公式为：$\dfrac{Q*K^T}{\sqrt(d_{k})}$，因此在开始前需明确：(1) 为何需要注意力得分 (2) 如何计算 Q, K, V 及其本质==</p>
<h3>注意力得分与注意力机制</h3>
<p>词嵌入中的余弦相似度与注意力层中的注意力得分存在差异：</p>
<ul>
<li>注意力机制评估两个词元间语义关系的<strong>概率</strong>，确保关系以相对重要性权重而非任意<strong>原始得分</strong>的形式表达。</li>
<li>虽然得分随输入动态变化，但转换过程（点积+缩放+softmax）是固定的，且<strong>可学习权重</strong>控制着数值的调整方式。</li>
<li>为确保机制数学稳定、易于训练和解释，需将概率范围限制在特定阈值内。</li>
</ul>
<p>但问题在于：如何实现这三点？答案不仅在于 Q, K, V 的推导方式，更关键的是它们如何通过可训练权重矩阵塑形。科学家选择将其抽象为查询（Query）、键（Key）和值（Value），而非简单的词元对词元矩阵，因为这种抽象使机制兼具灵活性与可扩展性——Q 聚焦于查询主体，K 定义信息索引方式，V 决定实际承载的内容。相比之下，直接的词元对比矩阵会将模型禁锢于僵化的相似性检查，降低训练过程中的控制力与适应性。</p>
<ul>
<li>Q=查询（Query），代表寻找的主体或目标，它提问：“我是谁？”</li>
<li>K=键（Key），代表被审视的对象，它提问：“我在看什么？”</li>
<li>V=值（Value），揭示 K 携带的信息，它提问：“我所见为何物？”</li>
</ul>
<blockquote>
<p>可将输入嵌入 $X$ 视作原始食材，后续将提及的权重矩阵 $W_Q, W_K, W_V$ 则是食谱，而生成的 Q, K, V 便是准备就绪、可供注意力机制享用的菜肴。</p>
</blockquote>
<h3>可训练权重 W_Q, W_K 与 W_V</h3>
<p>或许有人会说，即使没有训练过的权重，仍可计算 Q, K, V 并用于衡量词元间相似性。但实际上，若缺乏定制的 $W_{Q}, W_{K}, W_{V}$，模型无法优化该相似性，也无法决定应强调并传递哪些信息（值）。</p>
<p>此外，与FFN（前馈神经网络，即小型MLP）、层归一化和嵌入层一样，这些权重矩阵是<strong>可训练参数</strong>。它们通过优化器逐步反向传播更新。在推理阶段（训练后），它们固定不变，但每个编码器层（及该层内的每个注意力头）均保留其独有的 $W_{Q}, W_{K}, W_{V}$ 集合。此设计使模型能学习不同层和头中的多样化注意力模式，并在网络多个层级影响信息流动。</p>
<p>既然已理解 $W_{Q}, W_{K}, W_{V}$ 的重要性及其训练方式，下一步便是观察其实际应用。实践中，每个词元嵌入 $X$ 会先经这些权重投影生成 Q, K, V，继而作为计算注意力得分的基础。我们将定义Q、K和V，使它们各自与输入$X$的形状保持一致，以确保架构中各层的一致性，并在该层处理完成后得到相同形状的输出$Z$。</p>
<p>$$W_Q = X @ W_Q$$</p>
<p>为了计算形状均为(4,4)的Q、K和V（即输入矩阵的形状），显然我们需要一个$(4,3)$的矩阵来进行推导。</p>
<p>$$
X =
\begin{bmatrix}
1 &amp; 0 &amp; 1 &amp; 0 \
0 &amp; 2 &amp; 0 &amp; 2 \
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}, \qquad
W_Q =
\begin{bmatrix}
1 &amp; 0 &amp; 1 \
1 &amp; 0 &amp; 0 \
0 &amp; 0 &amp; 1 \
0 &amp; 1 &amp; 1
\end{bmatrix}, \qquad
W_K =
\begin{bmatrix}
0 &amp; 0 &amp; 1 \
1 &amp; 1 &amp; 0 \
0 &amp; 1 &amp; 0 \
1 &amp; 1 &amp; 0
\end{bmatrix}, \qquad
W_V =
\begin{bmatrix}
0 &amp; 2 &amp; 0 \
0 &amp; 3 &amp; 0 \
1 &amp; 0 &amp; 3 \
1 &amp; 1 &amp; 0
\end{bmatrix}
$$</p>
<h3>X * W_Q = Q</h3>
<p>了解了训练权重所代表的内容后，首要任务是计算Q、K、V。</p>
<p>从图中可以看出，$Q_{bread} * K_{(all)}$将生成一个新的概率向量，显然“吃”与“面包”之间的关系最具潜力。</p>
<p>$$Q = X W_Q, \qquad K = X W_K, \qquad V = X W_V.$$</p>
<h1>$$
Q =
\begin{bmatrix}
1 &amp; 0 &amp; 1 &amp; 0\
0 &amp; 2 &amp; 0 &amp; 2\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}
\cdot
\begin{bmatrix}
1 &amp; 0 &amp; 1\
1 &amp; 0 &amp; 0\
0 &amp; 0 &amp; 1\
0 &amp; 1 &amp; 1
\end{bmatrix}</h1>
<p>\begin{bmatrix}
1 &amp; 0 &amp; 2\
2 &amp; 2 &amp; 2\
2 &amp; 1 &amp; 3
\end{bmatrix}
$$</p>
<h3>原始注意力分数</h3>
<p>$$S = \frac{Q K^\top}{\sqrt{d_k}} \quad\text{(第i行给出了查询i与所有键的匹配分数)}.$$</p>
<blockquote>
<p>💡为什么是$\dfrac{1}{\sqrt{k}}$？&lt;br&gt;
(1) 将分数转化为权重（输出为概率分布）&lt;br&gt;
(2) 因为点积注意力在实践中更快且更节省空间，它可以利用高度优化的矩阵乘法代码实现，但会显著增长并使softmax结果失衡。[[^1]]</p>
</blockquote>
<h1>$$\sqrt{d_k} = \sqrt{2} = 1
S = \frac{1}{1}
\begin{bmatrix}
1 &amp; 0 &amp; 2\
2 &amp; 2 &amp; 2\
2 &amp; 1 &amp; 3
\end{bmatrix}
\begin{bmatrix}
0 &amp; 4 &amp; 2\
1 &amp; 4 &amp; 3\
1 &amp; 0 &amp; 1
\end{bmatrix}</h1>
<p>\begin{bmatrix}
2 &amp; 4 &amp; 4\
4 &amp; 16 &amp; 2\
4 &amp; 12 &amp; 10
\end{bmatrix}
$$
在计算原始注意力分数后，我们了解了一个查询与每个键的“对齐”强度。然而，这些分数无界且缺乏一致的尺度，使其不适合作为注意力机制中的最终权重。为解决此问题，我们引入softmax函数：</p>
<p>$$\mathrm{softmax}(s_j) = \frac{\exp(s_j)}{\sum_k \exp(s_k)}.$$</p>
<p>Softmax将任意分数向量转换为概率分布：每个权重变为正数，且每行总和为1。这种归一化确保注意力权重稳定、可解释，并在不同标记间具有可比性。因此，每个标记的表示成为其他标记的混合体，混合比例由这些动态的概率权重决定。</p>
<h3>Softmax归一化</h3>
<p>得到原始注意力分数$S$后，我们逐行应用softmax进行归一化：
$$
A = \mathrm{softmax}(S) \quad (\text{对}S\text{的每一行应用softmax})
$$
我们将通过代码实现此过程，而非深入探讨Softmax算法细节。attention_scores[0]代表标记1与所有标记的关系，标记2和标记3同理。</p>
<p>这确保每个查询的注意力权重形成概率分布（全部为正，每行总和为1）。</p>
<p>可直接实现如下：</p>
<p>attention_scores[0] = softmax(attention_scores[0])  # Q1与所有标记的注意力权重
attention_scores[1] = softmax(attention_scores[1])  # Q2与所有标记的注意力权重
attention_scores[2] = softmax(attention_scores[2])  # Q3与所有标记的注意力权重</p>
<p>此时，attention_scores的每一行以归一化概率形式，展示了查询对所有标记键的关注程度。</p>
<h3>拼接并恢复至原始输入尺寸（n, d_512）</h3>
<p>接下来，使用归一化后的注意力权重计算值向量的加权和：</p>
<p>$$Z = A ⋅ W_o$$</p>
<blockquote>
<p>其中A=(n,n)（分数经行向softmax处理）；W_o=(n, d_model)为同样经过预训练的权重矩阵。</p>
</blockquote>
<p>此处$Z$代表经过注意力处理后的新嵌入序列——每个标记现在是整个序列值向量的混合体，按注意力权重进行缩放。</p>
<p>在<strong>多头</strong>注意力中，我们并行执行相同步骤于$k$个头。每个头$i$沿特征维度拼接后得到：</p>
<p>$$Z_{\text{multi}} = \mathrm{Concat}(Z_1, Z_2, \dots, Z_H) \in \mathbb{R}^{n\times (H,d_k)},\quad d_k=\dfrac{d_{model}}{H}$$</p>
<p>由于设计上满足$H d_k = d_{model}$，拼接后的张量形状为$\mathbb{R}^{n\times d_{model}}$。
在我们的示例中，$n=3$，$d_{model}=8$，H=2，每个头有$d_k=4$，且
$$
Z_1, Z_2 \in \mathbb{R}^{3\times 4},\quad
Z_{\text{multi}} \in \mathbb{R}^{3\times 8}.
$$</p>
<p>拼接后，通常应用输出投影：</p>
<p>$$\tilde Z = Z_{\text{multi}} W_O, \qquad W_O \in \mathbb{R}^{d_{\text{model}}\times d_{\text{model}}}$$</p>
<p>此步骤确保最终表示与原始输入形状相同，即$(n, d_{\text{model}})$，保持模型层间的一致性。</p>
<h2>太长不看</h2>
<p>下图展示了自注意力层（设定维度d=512、头数h=8、序列长度s=20）的逐步计算流程：</p>
<p><img src="https://cfr2-img.flynncao.uk/202508231916856.png" alt="" /></p>
<p>我还绘制了流程示意图。为保持清晰度，初始阶段保持注意力计算未拆分状态，仅在最后引入多头拆分机制：</p>
<p><img src="https://cfr2-img.flynncao.uk/multi-head-attention(pytorch).drawio_light.png" alt="" /></p>
<p>了解单层自注意力的逐步计算后，自然会产生疑问：为何要将机制拆分为多个注意力头？</p>
<p>多头注意力并非随意设计，而是经过实践验证的方案。若不进行拆分，注意力机制仍可运作，但模型会丧失多样性视角（如语法、语义、长距离依赖等词元关系的不同层面）与计算效率。原始Transformer采用h=8且d_model=512（每个头维度d_k=64）的配置，实现了平衡——每个头保持较小维度，整体表征丰富度高，且训练稳定性强。</p>
<ol>
<li>输入X (s, d_model) 与参数矩阵W_Q, W_K, W_V (d_model, d_model) 相乘 → 得到Q,K,V (s, d_model)</li>
<li>维度重塑 → Q,K,V (s, h, d_k) → 分离出每个头的Q_i,K_i,V_i (s, d_k)</li>
<li>单头注意力计算：$softmax(Q_i K_i^T / sqrt(d_k))$ → 生成(s, s)注意力图</li>
<li>单头输出：(s, s)矩阵与(s, d_k)矩阵相乘 → 得到(s, d_k)</li>
<li>多头拼接：(s, h * d_k) = (s, d_model) → 可选W_O投影 → 最终输出(s, d_model)</li>
</ol>
<p>最终输出的注意力矩阵是$n \times 64$矩阵，每行代表单个词元的注意力矩阵。由于词元向量尚未完整，需将(n, 64)组合为(n, 512)维度。</p>
<p>通过完整执行该流程，我们不仅对序列施加可训练权重，还将输入投射到多个子空间：在每个子空间内进行注意力计算后重新整合视角——既为模型提供多样化的上下文信号，又保持d_model维度以供下一层使用。</p>
<h1>参考文献</h1>
<p>^1: Vaswani, Ashish, Noam Shazeer, Niki Parmar, et al. ‘Attention Is All You Need’. arXiv:1706.03762. Preprint, arXiv, 2 August 2023. https://doi.org/10.48550/arXiv.1706.03762.↩︎</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ESM-only在node22和TypeScript5环境下的实现]]></title>
            <link>https://flynncao.uk/posts/esm-only-application/</link>
            <guid isPermaLink="false">https://flynncao.uk/posts/esm-only-application/</guid>
            <pubDate>Sat, 23 Aug 2025 23:43:20 GMT</pubDate>
            <description><![CDATA[受antfu的Move on to ESM-only这篇文章启发，我最近开始将项目尽量规定ES Module使用，但在结合tsup调试jes...]]></description>
            <content:encoded><![CDATA[<p>受antfu的<a href="https://antfu.me/posts/move-on-to-esm-only">Move on to ESM-only</a>这篇文章启发，我最近开始将项目尽量规定ES Module使用，但在结合tsup调试jest的过程中，我遇到了一些问题。这篇文章会教你最大程度地灵活使用javascript, typescript到jest, viest, tsup这些流行bundler和测试库，解决他们的配置和兼容性。</p>
<h2>package.json</h2>
<p>这里只有一个字段需要注意：</p>
<pre><code>"type": "module" // or "commonjs" or " " 
</code></pre>
<p>使用 "type: module" 会：</p>
<p>• 强制所有的 <code>.js/.ts</code> 被识别为es-module
• 禁止这些文件里的require()语法</p>
<p>使用 "type: commonjs" 会：</p>
<p>• 强制所有的 <code>.js/.ts</code> 被识别为commonjs
• 禁止import/export等方式导入导出module</p>
<p>不使用 "type" 字段，那么默认是 "type: commonjs"</p>
<blockquote>
<p>如果使用<code>json5</code> 格式那么可以在脚本字段后添加<code>//</code>注释</p>
</blockquote>
<p>我们这篇文章需要你先开启<code>"type": "module"</code>。但这不意味着你不能用require()语法导入esm， 这在node v22.12.0 以后是默认支持的，先前的node版本需要追加<code>--experimental-vm-modules</code> flag。</p>
<h2>Typescript5.8</h2>
<p>既然要使用TypeScript，那么就离不开对<code>tsconfig.json</code>文件的配置。如果新初始化项目没有这个配置，可以用<code>tsc --init</code>命令生成一个默认的配置文件。（附带了很详细的配置）</p>
<ul>
<li>module: 控制输出的JS模块系统的表现（如import/export或者require的表现）。数值为： es2022/commonjs/AMD/UMD等等，<code>ts-jest</code> 推荐使用<code>es2022</code> 或者 <code>esnext</code>  搭配 <code>type:module</code> 使用; 如果使用<code>node16/node18/nodenext</code> ，相当于放权给<code>package.json</code>或者根据类型、语法自动进行判断</li>
<li>target: es6/es5/es2022/esnext/es3, 编译typescript文件到目标的语法，这样生成的代码可以尽量兼容旧的node或者浏览器环境</li>
<li>lib：type-checking相关，例如你的代码需要在浏览器中运行，那么想要 <code>window</code> 等对象在IDE也能被识别不报错，这里就要叠加上上 <code>DOM</code>  。
<blockquote>
<p>一切原生不支持Typescript的库仍需要实用<code>npm add -D @types/eslint</code> 等形式手动安装types （如何解决“老项目的导入地狱”? 请待下回分解）</p>
</blockquote>
</li>
<li>moduleresolution: 控制TS在编译过程如何在模块里寻找源文件（算法），node16, node22必须显示规定file extension无论js/ts, 如果切换为bundler,一般都会给通过如tsup和vite（这里会要求你把module也改为esnext等）</li>
</ul>
<h2>jest(ts-jest)</h2>
<p>在使用jest应付以上esm-only环境时，一个最常见的问题是can't require(ESM)，即使在最新的node版本下也无法，原因是这个lib依赖的是<code>ts-node</code>（一个几乎两年无更新的项目）</p>
<p><img src="https://cfr2-img.flynncao.uk/202508232333506.png" alt="" /></p>
<p>而jest到现在为止仍然没有正式支持ESM引入单元测试，而且对mocking等功能的支持很差 ，虽然jest自身可以通过追加<code>--experimental-vm-modules</code>参数来支持，但ts-jest，作为一个ts-&gt;js的transformer没能力更改jest的引入行为。因此实用前两章的 <code>type:module</code> 配置+ES2022/ESNext仍然会出错。</p>
<p>ts-jest给出了如下直到</p>
<ol>
<li>遵循jest的esm支持官方引导 https://jestjs.io/docs/ecmascript-modules</li>
<li>在package.json设置<code>type: "module"</code>，并设置<code>tsconfig</code>里的module为<code>Node16/Node18/NodeNext</code> ；或者 在package.json设置<code>type: "commonjs"</code>，并设置<code>tsconfig</code>里的module为<code>ES2015/ES2022/ESNEXT</code></li>
</ol>
<p>按照我们的需求，我们只能设置<code>type: "module"</code>。另外，想要显示声明文件拓展名导入ts文件（而不是用<code>js</code>后缀导入<code>ts</code>文件如 <code>import { foo } from './foo.ts'</code> 只需要在<code>tsconfig</code>里添加如下参数：</p>
<pre><code>    "moduleResolution": "nodenext",
    "allowImportingTsExtensions": true,
    "noEmit": true,
</code></pre>
<p>这时候我们可以开始写测试npm script了，按照（1）的要求</p>
<p>请使用<code>npm</code>或者<code>pnpm</code>安装<code>cross-env</code>包后使用</p>
<pre><code>    "test": "cross-env NODE_OPTIONS=\"$NODE_OPTIONS --experimental-vm-modules\"  jest --watchAll",
    "test:coverage": "cross-env  NODE_OPTIONS=\"$NODE_OPTIONS --experimental-vm-modules\"  jest --coverage "
</code></pre>
<p>》</p>
<p>最终结果 unit test可以正常进行、coverage可以计算，也能正常使用typescript编写代码和测试文件、导入导出esm模块。</p>
<p><img src="https://cfr2-img.flynncao.uk/202508240032209.png" alt="" /></p>
<p><img src="https://cfr2-img.flynncao.uk/202508240032301.png" alt="" /></p>
<p>完整的<code>tsconfig.json</code>如下：</p>
<pre><code>{
  "compilerOptions": {
    "lib": [
      "ESNext"
      "DOM"
    ],
    "outDir": "build",
    "removeComments": true,
    "module": "nodenext",
    "target": "ES6",
    "baseUrl": "./",
    "esModuleInterop": true,
    "moduleResolution": "nodenext",
    "allowImportingTsExtensions": true,
    "noEmit": true,
    "isolatedModules": true,
    "paths": {},
    // 这些都是默认配置
    "alwaysStrict": true,
    "allowUnreachableCode": false,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "noImplicitReturns": true,
    "noUncheckedIndexedAccess": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true
  },
  "include": ["./**/*.ts"],
  "exclude": [
    "node_modules/**/*"
  ]
}
</code></pre>
<p>这是我的tsup配置：</p>
<pre><code>import { defineConfig } from 'tsup'

export default defineConfig((options) =&gt; {
  return {
    entry: [
      './src/index.ts',
    ],
    splitting: true,
    sourcemap: false,
    clean: false,
    outDir: 'dist',
    format: ['esm'],
    minify: !options.watch,
  }
})
</code></pre>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[长期更新｜境外服务食用、资源下载管理指南]]></title>
            <link>https://flynncao.uk/posts/surfing-in-china/</link>
            <guid isPermaLink="false">https://flynncao.uk/posts/surfing-in-china/</guid>
            <pubDate>Wed, 12 Mar 2025 05:50:36 GMT</pubDate>
            <description><![CDATA[一篇你在中国大陆无忧使用境外服务的必备指导书，长期更新。如果有余力的话，支持下正版会比较好！本文以windows平台为例。也涉及一些跨平台软...]]></description>
            <content:encoded><![CDATA[<p>一篇你在中国大陆无忧使用境外服务的必备指导书，长期更新。</p>
<p>如果有余力的话，支持下正版会比较好！</p>
<blockquote>
<p>本文以windows平台为例。也涉及一些跨平台软件。</p>
</blockquote>
<h2>科学上网</h2>
<p>一个<strong>稳定</strong>的自建或者机场提供商，是能让你稳定使用境外各种服务的基础。能让你的烦心事最大程度地减到最少。这里不推荐任何机场，但可以在这些repo里试用下自己访问速度快的，一般来说每月20cny的已经可以保证YouTube等较为流畅的访问：</p>
<p>注意！充值年费要慎重，警惕跑路风险。</p>
<h3>DNS转发</h3>
<p>2025年，通过dns修改来访问google服务和github等已经变得繁琐且不稳定，但还是有一些服务没被污染值得修改hosts （位置在 <code>C:\Windows\System32\drivers\etc\hosts</code>，我目前在改的只有notion，在尾部添加即可。</p>
<pre><code>104.26.4.98 www.notion.so

104.26.5.98 www.notion.so

</code></pre>
<p>有时候raw.githubusercontent.com这个域名会被错误解析为0.0.0.0
通过 www.ipaddress.com/ 查询 raw.githubusercontent.com 的IP，并在hosts中添加一个ipv4/v6地址就行了。</p>
<pre><code>185.199.108.133 raw.githubusercontent.com
</code></pre>
<h3>CLash流量过滤</h3>
<p>吸收被steam偷跑200g流量的惨痛教训，以及一些机场并不会提供很缜密的分流规则，我在使用的是某大佬写的<a href="https://gist.github.com/flynncao/f397d9b2834ab9fe17d658ee159a7b5f">Clash Verge Rev 全局扩展脚本</a>（懒人配置，Clash的其他版本也可参考）：</p>
<p>安装后在WIN+R输入 <code>steam://open/console</code> 然后键入 <code>user_info</code>, 像这样 <code>IP_COUNTRY</code> 显示为 CN就说明只会走国内流量下载了</p>
<pre><code>user_info

Server Time: Sat Feb 22 11:41:17 2025

IPCountry: CN

Offline Mode: no
</code></pre>
<p>也可到Steam窗口左上角点击【Steam】-&gt;【Setting】-&gt; 【Downloads】更改到邻近的下载服务器节点：</p>
<p><img src="https://cfr2-img.flynncao.uk/202502221140023.png" alt="" /></p>
<h2>软件</h2>
<p>列出我平时最常用的软件和工具，几乎全部开源免费。</p>
<ul>
<li>邮件客户端：Thunderbird（Windows）， Spark（iOS）</li>
<li>浏览器：Chrome，Brave</li>
<li>密码：Bitwarden</li>
<li>时间追踪：TogglTrack， Wakatime</li>
<li>办公：Microsoft Office 365</li>
<li>读书：Google Play Books (全平台), 微信读书, Calibre(管理Kindle的书籍和转换格式)</li>
<li>RSS阅读器：follow.is（Windows），NetnewsWire(iOS)</li>
<li>记账： 鲨鱼记账（人民币）、Expendee（外币)</li>
<li>笔记：Obsidian（笔记和草稿），Notion（GTD任务规划）
在用的Obsidian Plugins:<pre><code>[
"emoji-shortcodes",
"obsidian-system-dark-mode",
"cm-chs-patch",
"dataview",
"templater-obsidian",
"editing-toolbar",
"tag-summary-plugin",
"tag-word-cloud",
"tag-search",
"obsidian-underline",
"consistent-attachments-and-links",
"wikilinks-to-mdlinks-obsidian",
"obsidian-plugin-toc",
"github-embeds",
"obsidian-importer",
"obsidian-rich-links",
"obsidian-vault-statistics-plugin",
"table-editor-obsidian",
"obsidian-image-auto-upload-plugin",
"image-captions",
"lazy-plugins",
"nl-syntax-highlighting",
"code-styler"
</code></pre>
</li>
<li>输入法：RIME+雾凇拼音</li>
<li>词典：欧路词典</li>
<li>截图：ScreenToGif，Snipaste</li>
<li>视频录制：OBS Studio</li>
<li>睡眠管理：AutoSleep（iOS，只需两元）</li>
</ul>
<p>我平时还在用哔哩哔哩和YouTube，但我也在用<a href="https://unhook.app/">Youtube Unhook</a>来修改主界面减少沉浸感和算法推荐。
如果你平时用Twitter比较多也可使用<a href="https://github.com/insin/control-panel-for-twitter">Control Panel For Twitter</a>去掉讨厌的时间线等推送。</p>
<h2>换源/镜像站</h2>
<h3>一般</h3>
<p><a href="https://github.com/RubyMetric/chsrc">chsrc</a> 基本上可以覆盖常用的编程语言（node, python) 及winget、bash等系统软件包管理工具。</p>
<p>关于Docker的镜像，除了用chsrc找源也可以从在<a href="https://github.com/dongyubin/DockerHub">这里</a>搜集一些最近可用的。例如这是我现在用的镜像源：</p>
<pre><code>// Docker Desktop -&gt; Settings -&gt; DockerEngine Configuration
"registry-mirrors": [
    "https://docker.1ms.run",
    "https://docker.mybacc.com",
    "https://dytt.online",
    "https://lispy.org",
    "https://docker.xiaogenban1993.com",
    "https://docker.yomansunter.com",
    "https://aicarbon.xyz",
    "https://666860.xyz",
    "https://docker.zhai.cm",
    "https://a.ussh.net",
    "https://hub.littlediary.cn",
    "https://hub.rat.dev",
    "https://docker.m.daocloud.io"
   ]
</code></pre>
<h3>git（GitHub）</h3>
<p>而作为程序员用的最多的SVN，我推荐直接修改命令来避免直接重定向git到gitclone.com或者其他镜像网站的debuff (如git push在private库定位不到repo的git地址)</p>
<p>只需要在PS输入<code>echo $profile</code>就可以查看当前powershell配置文件的位置
如：<code>C:\Users\westw\Documents\PowerShell\Microsoft.PowerShell_profile.ps1</code></p>
<p>直接用notepad或者其他编辑器在ps1文件底部添加上：</p>
<pre><code>function gc {
    param (
        [string]$url
    )
    # Check if the URL starts with 'https://github.com/'
    if ($url.StartsWith("https://github.com/")) {
        # Replace 'https://github.com/' with 'https://gitclone.com/'
        $url = $url -replace "https://github.com/", "https://gitclone.com/"
    }
    # Run git clone with the updated URL
    git clone $url
}

# Alias for git push (no modification needed)
function gp {
    git push $args
}
Remove-Item Alias:gc -Force -ErrorAction Ignore
Remove-Item Alias:gp -Force -ErrorAction Ignore
</code></pre>
<p>记得修改之后要重新开一个terminal窗口才会让配置生效。</p>
<p><img src="https://cfr2-img.flynncao.uk/202502221155195.png" alt="image.png" /></p>
<h2>huggingface &amp; ollama</h2>
<p>目前我采用的方案，使用<code>huggingface-cli</code> 下载dataset和model。</p>
<p>只需要在系统环境变量中增加<code>HF_ENDPOINT</code>值为<code>https://hf-mirror.com</code>的环境变量即可。</p>
<p>关于使用hf-cli下载数据集和模型的注意事项，可以看我<a href="https://blog.csdn.net/YuriChao/article/details/147629193">这篇博文</a>。</p>
<h2>资源下载</h2>
<h3>番剧</h3>
<p>习惯用Telegram追番的，可以试试我的<a href="https://github.com/flynncao/afanime">bot</a>先。对于平时惯用安卓和Windows且不太想折腾只想离开B站和盗版看番站但有不失弹幕体验的，我推荐一站式在线弹幕追番平台<a href="https://myani.org">Animeko</a> 来直接下载和缓存观看。</p>
<p>如果有兴趣使用BT或者比较喜欢自己存放，可以试试这个方法：</p>
<ol>
<li>
<p>打开<a href="https://mikanani.me/">蜜柑计划</a> 官网，搜索想看的番剧
<img src="https://cfr2-img.flynncao.uk/202502221227241.png" alt="image.png" /></p>
</li>
<li>
<p>选择合适的字幕组（如何挑选质量较高的字幕组？可以看我<a href="https://flynncao.uk/posts/translation-group-review">这篇文章</a>参考）</p>
</li>
<li>
<p>点击字幕组标题右边的RSS图标
<img src="https://cfr2-img.flynncao.uk/202502221228478.png" alt="89dc53bccfa81fc228d67accb4f47466.png" /></p>
</li>
<li>
<p>在打开的网页复制地址栏的内容（这就是rss feed link，也可以放在其他RSS阅读器里直接使用）</p>
</li>
<li>
<p>回到你的bt下载工具，如QbitTorrent</p>
</li>
<li>
<p>在RSS的标签页点击【New Subscription】，输入刚才复制的连接
<img src="https://cfr2-img.flynncao.uk/202502221231160.png" alt="image.png" />
然后就可以等待它订阅自动下载了（需要日常挂机）</p>
</li>
</ol>
<ul>
<li>设置过滤规则
点击刚才RSS标签tab里的RSS Downloader，可以自定义过滤规则，我这里只对【简日】标题进行了过滤，看官可以根据自己需要建立规则，也可以使用正则匹配（autobangumi/animeko也有类似机制）
注意在applay rules to Feeds里勾选特定的番剧订阅源即可，如Ani（巴哈姆特）源的番剧只有一种视频就【默认不过滤】。
<img src="https://cfr2-img.flynncao.uk/202502221235564.png" alt="image.png" /></li>
</ul>
<p><img src="https://cfr2-img.flynncao.uk/202502221237148.png" alt="image.png" /></p>
<p>下载完成的番剧也可以使用<a href="https://www.dandanplay.com/">弹弹play</a>管理和装载弹幕。</p>
<p>如果你有NAS或者本地硬盘还蛮大的，想搭建自己的流媒体，我推荐使用<a href="https://github.com/EstrellaXD/Auto_Bangumi">autobangumi</a> 真正解放双手追番。</p>
<p>如果你用Telegram比较多且不差流量，那快来试试<a href="https://search.acgn.es/">realsearch</a>和我基于RS开发的<a href="https://github.com/flynncao/afanime">追番bot</a>吧！</p>
<h3>书籍</h3>
<p>纸质书当然自己买就可以了，在线资源除了在各大阅读平台（如微信读书、Amazon、Bookwalker）等正规渠道电子书之外</p>
<p>也可以到全球最大的电子图书馆z-library找一找（经常被封，建议直接私信我），大部分书都有资源。</p>
<h3>软件</h3>
<ul>
<li><a href="https://www.ghxi.com/">果壳剥壳</a>，还提供一些正版打折途径。</li>
<li><a href="https://www.423down.com/">432Down</a></li>
<li><a href="https://flowus.cn/share/ab4b6b86-34a6-4aa0-a679-b4a221b8e41d">Adobe全家桶直链</a></li>
</ul>
<h3>游戏</h3>
<p>综合的<a href="https://game.nite07.com/">BT整合站</a>或者<a href="https://rutracker.net/forum/index.php">毛子的站</a>。我个人用<a href="https://fitgirl-repacks.site/">Fitgirl Repack</a>版本比较多。</p>
<p>习惯用度盘的可以移步<a href="https://www.gamer520.com/">游戏小乐园</a>。</p>
<p>喜欢领epic游戏的可以关注这个<a href="https://t.me/epicfreegames">Telegram Channel</a>。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[图床选择和自部署指南]]></title>
            <link>https://flynncao.uk/posts/image-hosting-guide/</link>
            <guid isPermaLink="false">https://flynncao.uk/posts/image-hosting-guide/</guid>
            <pubDate>Thu, 12 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[用最稳定和省米的方式部署属于你自己的长期图床。有很多方式，但我目前用过的最方便的方式无非是picgo 。如果你是Typora使用者可以搭配p...]]></description>
            <content:encoded><![CDATA[<p>用最稳定和省米的方式部署属于你自己的长期图床。</p>
<h2>如何上传？</h2>
<p>有很多方式，但我目前用过的最方便的方式无非是<a href="https://picgo.github.io/PicGo-Doc/zh/guide/">picgo</a>  。如果你是Typora使用者可以搭配<a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/">picgo-core</a>，<s>这样又少了一个开机启动项。</s></p>
<h2>图床选择</h2>
<h3>Github</h3>
<p>✅优点：不限制上传图的大小和数量，同步方式多种多样配置方便。</p>
<p>🚫 缺点：中国可能会无法直接访问，另外你的图片一定会是<strong>公开的</strong>（私有库不能当图床）</p>
<p>具体方法如下：</p>
<p>假设你已经<a href="https://github.com/signup">注册</a>好了Github，请直接访问 <a href="https://github.com/new">https://github.com/new</a> 来新建一个仓库（这里就直接用英文页面了，机翻痛苦），输入仓库名，选择 <code>public</code> 后点击【New Repository】来新建一个公开库。</p>
<p><img src="https://cfr2-img.flynncao.uk/202412122141966.png" alt="" /></p>
<p>然后你就可以使用Git工具（如果不想额外学习也可以使用 <a href="https://desktop.github.com/download/">Github-Desktop</a>工具来同步git库）向这个库里上传图片或者其他资源了！当然这个空的库页面也提供了一个极简的命令行上传教程：</p>
<p>假设我上传的文件名为 <code>bread.jpeg</code> ，上传完成后访问这个特定资源的URL如下：</p>
<p><a href="https://github.com/flynncao/blog-img-sample/blob/main/bread.jpeg">https://github.com/flynncao/blog-img-sample/blob/main/bread.jpeg</a></p>
<blockquote>
<p>格式为：`https://github.com/你的github用户名/你的仓库名/blob/默认分支名/资源文件名</p>
</blockquote>
<h3>国外对象存储提供商</h3>
<p><strong>💡Cloudflare（10GB/流量 每月） 和 AWS（5GB/流量 每月）均有免费的额度, 前提需要添加受支持的付款方式：*⚠️以上存储量也会参考访问带宽，但桶里的数据超出这个存储量一定会被计费</strong></p>
<p>✅优点：可以借助Cloudflare（以下简称为CF或者cf）和AWS的cdn节点来进行流量优化，几乎不用担心国内或者其它地区无法访问的问题。</p>
<p>🚫缺点：免费存储额有限制，超出需要氪金；配置略微繁琐。</p>
<ul>
<li>AWS</li>
</ul>
<blockquote>
<p>AWS 接受哪些付款方式？
AWS 接受大多数主流信用卡和借记卡。如果您是 AWS Inc. 客户，您可以使用支持美元货币交易的中国银联（CUP）信用卡注册。如果您是 Amazon Web Services India Private Limited 客户，则可以使用 Visa、MasterCard 或 American Express。注意：某些信用卡可能需要从您的银行获得额外授权才能用于支付账单。有关详细信息，请与您的信用卡发卡银行联系。如果您符合某些要求，AWS 还接受美国银行账户的 ACH 直接付款或欧洲银行账户的 SEPA 直接付款。如果您的付款/结算方式未在上方列出，请联系我们 以详细了解接受的付款方式。</p>
</blockquote>
<ul>
<li>CloudFlare</li>
</ul>
<p>Cloudflare 仅接受 Visa、Mastercard、American Express、Discover、PayPal 和 UnionPay。目前不支持其他付款方式（例如 Maestro）。 <a href="https://developers.cloudflare.com/support/account-management-billing/billing-cloudflare-plans/cloudflare-billing-policy/#approved-payment-methods">source</a></p>
<p>完成上述付款方式（payment methods）添加之后，以CloudFlare为例就可以前往控制面板的【R2 Object Storage】直接用【Create Bucket】新建一个桶就行了</p>
<p><img src="https://cfr2-img.flynncao.uk/202412122141944.png" alt="" /></p>
<p><img src="https://cfr2-img.flynncao.uk/202412122142035.png" alt="" /></p>
<p>创建完成之后你就可以用CloudFlare自带的上传工具上传图片或者其他媒体文件。但如果想用到第一章所说的picgo省去繁琐的上传和获取公开URL链接，可以查看之后的“和PicGo结合→Cloudflare”章节。</p>
<h3>SM.MS</h3>
<p>✅优点：无需visa或者万事达卡，上传和配置最为方便，默认提供全球cdn加速。</p>
<p>🚫缺点：有上传大小限制，容量相比cf和aws无明显优势<a href="https://smms.app/pricing">（5GB）</a>。</p>
<p>注册完成就可以直接上传，如果 <a href="http://sm.ms">sm.ms</a> 本体网站无法访问可以使用 <a href="http://smms.app">smms.app</a>。</p>
<p><img src="https://cfr2-img.flynncao.uk/202412122144854.png" alt="" />
可以得到最直白的各种链接。</p>
<h2>和PicGo结合，解放双手</h2>
<h3>Github</h3>
<p>直接访问 <a href="https://github.com/settings/tokens"><code>https://github.com/settings/tokens</code></a> 下的【personal access tokens】→ 【tokensclassic】来创建仓库的资源管理密钥，选择经典（classic）方式可以少去很多配置的麻烦。</p>
<p><img src="https://cfr2-img.flynncao.uk/github1-202412122144497.png" alt="" />
<code>Note</code> 是名称，可以随便写。过期时间  <code>Expiration</code> 我一般习惯会选择一年，看个人喜好。重要的是给这个token选择合适的适用范畴（scopes），这里直接勾选 <code>repo</code> 下的所有选项即可：</p>
<p><img src="https://cfr2-img.flynncao.uk/github2-202412122145306.png" alt="" /></p>
<p>然后你就可以看到唯一的一个token值，需要保存起来！因为下次你就看不到了。</p>
<p><img src="https://cfr2-img.flynncao.uk/github3-202412122145262.png" alt="" /></p>
<p>然后回到PicGo主界面左侧菜单找到【Github】，填入刚刚获取的token到“设定Token”里，仓库名的格式参考“用户名+仓库名”，我这里是 <code>flynncao/blog-img-sample</code> 。分支名就写默认的 <code>main</code> 。可以点击【设为默认图床】每次上传就无需选择图床了。</p>
<p><img src="https://cfr2-img.flynncao.uk/picgo1-202412122146815.png" alt="" />
回到上传区，测试！</p>
<p><img src="https://cfr2-img.flynncao.uk/picgo2-202412122146417.png" alt="" /></p>
<p>默认你会得到一个以下的markdown图片链接地址，通过给出的URL也可以替换为其他格式。当然也可以在上传区选择默认链接格式。</p>
<p><img src="https://raw.githubusercontent.com/flynncao/blog-img-sample/main/akane.jpg%5D(https://raw.githubusercontent.com/flynncao/blog-img-sample/main/akane.jpg)" alt="" /></p>
<h3>Cloudflare</h3>
<p>去PicGo主程序的【插件设置】里搜索 <code>Cloudflare</code> 安装如图的插件</p>
<p><img src="https://cfr2-img.flynncao.uk/picgo3-202412122146801.png" alt="" /></p>
<p>然后回到主菜单【图床选择】就能看到 Cloudflare-r2的字样，需要输入以下信息</p>
<p><img src="https://cfr2-img.flynncao.uk/picgo4-202412122147085.png" alt="" />
这里我会一一说明来源：</p>
<ul>
<li>AccountID: 这个是Cloudflare对象存储的个人id，和桶本身无关，可以在【R2对象存储】主页面右侧的【API】然后选择【Use R2 with APIs】就能看到如图的Account ID和Secret API了。</li>
</ul>
<p><img src="https://cfr2-img.flynncao.uk/accountid-202412122147418.png" alt="" /></p>
<ul>
<li>Accesskeyid+SecretAccessKey，同样也是刚刚的界面，我们需要点击【管理R2 API令牌】来创建一个令牌。这里需要选择管理员读写权限。</li>
</ul>
<p><img src="https://cfr2-img.flynncao.uk/Accesskeyid&amp;SecretAccessKey-202412122148895.png" alt="" /></p>
<p>点击【生成密钥】就可以看到我们需要的信息，具体如下：</p>
<p><img src="https://cfr2-img.flynncao.uk/generatepasskey-202412122149472.png" alt="" />
⚠️ 注意这里的密钥只能在这里查看一次，需要及时保存！Github的密钥也是一样的</p>
<ul>
<li>customDomain</li>
</ul>
<p>自定义域名可以帮助我们更好地定位资源，具体如：</p>
<p><code>https://cfr2.abc.com/mai.jpg</code> 或者 <a href="https://pub-065e737f79f247c598e6cc3336922ad2.r2.dev/beep.mp3"><code>https://pub-065e737f79f247c598e6cc3336922ad2.r2.dev/beep.mp3</code></a></p>
<p>在R2对象存储主页面找到我们刚创建的桶名字（如”traveller”），点击进入管理，找到【设置】这个标签，向下可以找到【公开访问】的选项，这里进行二选一：</p>
<p><img src="https://cfr2-img.flynncao.uk/publicaccess-202412122150129.png" alt="" /></p>
<p>这次我们使用R2.dev子域，拷贝CF提供的域名（注意需要去掉前面的 <code>https://</code> ） 回到PicGO的CloudFlare R2插件的配置页输入上面需要的信息，存储桶名字就是创建的时候设置的名称，我这里是 <code>traveller</code> 。然后点击【设置为默认图床】（上传区也可以切换图床，但略麻烦）</p>
<p>设置完成的效果如图：</p>
<p><img src="https://cfr2-img.flynncao.uk/202412122150273.png" alt="" /></p>
<p>然后就可以回到上传区测试：</p>
<p><img src="https://cfr2-img.flynncao.uk/202412122151839.png" alt="" /></p>
<p>上传完毕我们就得到了一个 markdown格式的链接！</p>
<p><code>![]([https://pub-065e737f79f247c598e6cc3336922ad2.r2.dev/yaorena.jpeg](https://pub-065e737f79f247c598e6cc3336922ad2.r2.dev/yaorena.jpeg))</code></p>
<p>在上传区可以切换你想上传之后生成的链接模式，当然是基于我们之前设置的“自定义域名”。</p>
<h3>SM.MS</h3>
<p>直接访问 <a href="https://smms.app/home/apitoken">https://smms.app/home/apitoken</a> 点击【Generate Secret Token】创建一个token。</p>
<p><img src="https://cfr2-img.flynncao.uk/202412122152635.png" alt="" /></p>
<p>然后回到PicGO的设置菜单找到【SM.MS】，在“设定Token”填入刚刚生成的token，测试上传即可。</p>
<blockquote>
<p>注：如果你像我一样PicGo默认提供的sm.ms插件不可用，可以去【插件设置】搜索安装 <code>smms-user</code> 这个插件，把刚刚的token填入auth选项中即可。 <a href="https://github.com/PicGo/PicGo-Core/issues/154">ref</a></p>
</blockquote>
<blockquote>
<p><img src="https://cfr2-img.flynncao.uk/202412122151247.png" alt="" /></p>
</blockquote>
<h3>jsdeliver</h3>
<p>jsdeliver提供免费托管静态资源并提供分发加速，经过测试只需要将<strong>原链接</strong>替换为如下格式可以将经常抽风的github图片加载速度缩短到毫秒之间。（同名的话，默认会拉取最新版本的文件）</p>
<p><code>https://github.com/flynncao/blog-img-sample/blob/main/akane.jpg</code></p>
<p>替换为</p>
<p><code>https://cdn.jsdelivr.net/gh/flynncao/blog-img-sample@latest/akane.jpg</code></p>
<blockquote>
<p>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名/文件路径</p>
</blockquote>
<p>除了缓存会慢一些，这种方式来加速github图床是我首推的，只需要替换原来的链接名即可。</p>
<h2>Picgo生态，无需启动APP自动上传</h2>
<p>前置：需要安装picgo-core，以npm为例只需 <code>npm install picgo -g</code> 重启终端输入<code>picgo</code> 有输出证明安装成功。</p>
<p>然后我们配置下图床信息，文件位置在</p>
<ul>
<li>Linux / macOS → <code>~/.picgo/config.json</code>.</li>
<li>Windows → <code>C:\Users\[your user name]\.picgo\config.json</code>.</li>
</ul>
<p>默认是sm.ms，再次以cloudflare r2为例，先在终端使用<code>picgo add @tianlelyd/picgo-plugin-cloudflare-r2</code> 安装对应插件，然后写成这种格式。</p>
<pre><code>
{
  "picBed": {
    "current": "cloudflare-r2",
    "uploader": "cloudflare-r2",
    "cloudflare-r2": {
      "accountId": "xxx",
      "accessKeyId": "xxx",
      "secretAccessKey": "xxx"
      "bucket": "img",
      "path": "",
      "customDomain": "cfr2-img.flynncao.uk"
    }
  },
  "picgoPlugins": {
    "@tianlelyd/picgo-plugin-cloudflare-r2": true,
  }
}
</code></pre>
<h3>Typora</h3>
<p>以1.9.5的Typora为例，点击菜单栏的<code>file-&gt;perferences -&gt; image</code> 里找到以下设置，选择<code>custom command</code> 然后填入 <code>picgo upload</code> 或者 <code>picgo u</code> ，点击下 test uploader，里面能输出绿色成功就代表能正常使用了。</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20250416160706116.png" alt="image-20250416160706116" /></p>
<h3>Obsidian</h3>
<p>按照前述的方法配置picgo-core完成后，在Obsidian设置中找到third-party plugins选项, 安装名为“obsidian-image-auto-upload"的插件，具体插件设置可以参考我的：</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20250416164846519.png" alt="image-20250416164846519" /></p>
<p>（注）这个插件有上传bug，修复方式可复制我的这个<a href="https://gist.github.com/flynncao/8fa206abecd9b7d9cfb123968c83d5e7">gist</a> 内容直接替换<code>库名\.obsidian\plugins\obsidian-image-auto-upload-plugin</code>下的main.js修复。</p>
<h2>CDN加速</h2>
<p>任何国内CDN服务商加速的流量都需要先给<strong>域名备案</strong>使用，博主是不喜备案人士。因此这里先挖个坑待填。</p>
<p><a href="https://www.upyun.com/">又拍云</a>提供现金券和SSL证书奖励，可以用来尝鲜：</p>
<p><img src="https://cfr2-img.flynncao.uk/image-hosting-guide-202412201631026.png" alt="" /></p>
<h2>参考</h2>
<p>https://www.yuhuizhen.com/2022/11/27/image-bed/index.html</p>
<p>https://guolongji.xyz/post/picgo-best-practice/</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[就翻译角度对动漫字幕组进行的横向测评]]></title>
            <link>https://flynncao.uk/posts/translation-group-review/</link>
            <guid isPermaLink="false">https://flynncao.uk/posts/translation-group-review/</guid>
            <pubDate>Mon, 30 Sep 2024 00:01:00 GMT</pubDate>
            <description><![CDATA[纠结在现阶段怎么给喜欢的番剧挑选合适的中文字幕组，看这篇就对了！受锐评中文字幕组 这篇帖子影响对测评字幕组产生了兴趣，也有朋友费心做了对字幕...]]></description>
            <content:encoded><![CDATA[<p>纠结在现阶段怎么给喜欢的番剧挑选合适的中文字幕组，看这篇就对了！</p>
<p>受<a href="https://bbs.saraba1st.com/2b/thread-2193315-0-1.html">锐评中文字幕组</a> 这篇帖子影响对测评字幕组产生了兴趣，也有朋友费心做了对字幕组整体质量的测评（未公开，但还是感谢）；刚好最近在开发可以自动追番的<a href="https://t.me/gochumonwa">Telegram bot</a>，一直苦于如何选择“精品“字幕组来作为巴哈姆等版权方翻译的备选。本次就以最近几年，尤其是本季度的番剧就<strong>翻译角度</strong>进行测评。</p>
<blockquote>
<p>请注意：对于不同的番、不同的题材会有不一样的翻译水平 ，也就是所谓的上下限。本文会尽量覆盖一个字幕组在最近2-3年的主流作品表现（前提我自己也要看过这部番）</p>
</blockquote>
<p>叠甲：7月份趁热打铁参加了N2（已水过）。自己之前也参与过一些作品的翻译&amp;校对（漫画为主，<a href="https://t.me/majimay/71">这届精灵看来是瘦不下来了！</a> <a href="https://t.me/majimay/67">空之箱歌词的意思是？</a>  <a href="https://www.bilibili.com/video/BV1pr421M7v4">赛马娘GOCHI WEEK原创菜谱介绍</a>，虽说经验远不及字幕组，但从观者角度自认为已经可以做一个客观些的点评了。</p>
<p>随着自己日语 &amp; 翻译水平的提升，我也会慢慢改进这篇文章~</p>
<p>[toc]</p>
<h2>准备</h2>
<p>现在是2024年，感谢动画爱好者，即使是冷门番也会至少有2-3个民间字幕组帮忙翻译压制。优先选择了业务范围比较广或比较老牌的字幕组。<strong>对于同一部作品</strong>，会加入业务范围窄的字幕组，一旦发现中途弃坑则不会被评测。</p>
<ul>
<li>
<p>喵萌奶茶屋 (Nekomoe Kissaten)</p>
</li>
<li>
<p>北宇治（KitaujiSub)</p>
</li>
<li>
<p>SweetSub</p>
</li>
<li>
<p>诸神字幕组（Kamigami)</p>
</li>
<li>
<p>千夏字幕组 (Aitrota)</p>
</li>
<li>
<p>拨雪寻春(Haru&amp;Hana)</p>
</li>
<li>
<p>霜庭云花(STYHSub)</p>
</li>
<li>
<p>云光字幕组</p>
</li>
<li>
<p>桜都字幕组(Sakurato)</p>
<p>等等</p>
</li>
</ul>
<p>番剧选择和范围：根据<a href="https://myanimelist.net/">MyAnimeList.net</a>, <a href="https://anilist.co/">AniList</a>, <a href="https://www.anitrendz.com/">Anime Trending</a>, <a href="https://bangumi.tv/">Bangumi </a>等数据。本季度（2024年7月）热度最高的几个番剧为：《<a href="https://bgm.tv/subject/484761">しかのこのこのここしたんたん</a>》《<a href="https://bgm.tv/subject/464376">負けヒロインが多すぎる!</a>》《<a href="https://bgm.tv/subject/443428">推しの子 2期</a>》、《<a href="https://bgm.tv/subject/424883">時々ボソッとロシア語でデレる隣のアーリャさん</a>》、《<a href="https://bgm.tv/subject/474906">小市民シリーズ</a> 》、《<a href="https://bgm.tv/subject/393037"> 義妹生活</a>》、《<a href="https://bgm.tv/subject/428823">疑似ハーレム</a>》、<a href="https://bangumi.tv/subject/475354">《〈物語〉シリーズ オフ&amp;モンスターシーズン》</a></p>
<blockquote>
<p>《押しの子》，《〈物語〉シリーズ オフ&amp;モンスターシーズン》因为是续作or外传所以排除。 義妹生活首集太长的所以也不被考虑。校园恋爱类型的作品很多， 这里根据<strong>字幕组的覆盖</strong>方便对比后最终选择了目前口碑还算不错的 《負けヒロインが多すぎる》。而作为开局就热度很高的，随着时间的推进争议度逐渐提高（也可能是评分崩坏）的《しかのこのこのここしたんたん》、《小市民シリーズ》、《時々ボソッとロシア語でデレる隣のアーリャさん》。自然也在重点评测行列。</p>
</blockquote>
<p>一些小或新的字幕组以及一些老牌的字幕组因为业务收紧因为业务范围窄产出作品少而不好横向比较，为了公平翻看了一些其之前翻译的老作品（2020+），这里不再一一列举。</p>
<h2>我心目中“好“的翻译</h2>
<p>每个主题每个对话基础分是3分。如果有出彩的地方会加分，出糗或低级错误会严重减分。</p>
<p>所谓“合格”的整体标准是：直译，最好多用第二人称和去敬语表达</p>
<p>✅加分项有：（1） 巧妙利用中文的语气词、连接词进行转化；（2） 对于不熟悉的文化/地名通过近义词巧妙替换或追加了注释；（3）注重口语而非书面的表达（除非角色性格使然或者原作/剧本题材限制）。</p>
<p>🟥减分项有：（1） 使用短期爆火的的网络用语或方言；（2）过多的解释和语法堆叠来企图和日语语法结构持平，对理解含义无帮助；（3）在原句上自由地我行我素的二次创作以至于影响观感或者影响理解上下文；（4）拙劣地体现敬语或口癖，或前后不一致；（5）不经查证错把日语同样词、近样词当做中文意思。</p>
<p>⚪不增不减：（1）对口癖、敬体尊卑、称呼远近的处理；（2）二次创作不影响观感，对剧情的描绘彰显风格但不过火。</p>
<h2>最优解</h2>
<p>这个篇章主要用于“参考”而非咬文嚼字，也可以作为个人进行字幕组初期测评抑或是判定翻译质量的切入点。</p>
<blockquote>
<p>注意：这里的ChatGPT (4o)的翻译是没有上下文的，也没有任何校对修改</p>
</blockquote>
<h3>词汇</h3>
<h4>同词异义</h4>
<p>【失格】在现代汉语中的意思是：出圈儿；不得体 。例如失格的话、礼仪失格。</p>
<p>但在日语中有完全不同的意思：太宰治就有名作——《人間失格》「人間として生きていく資格を失うこと」，翻译为：作为...不够格，这里也是同样的意思 。（附：鹿乃子鹿乃子虎视眈眈ep1（0:16:14）也有类似的台词「これじゃ優等生...いや、それ以前に人間失格だ！」</p>
<p><img src="https://cfr2-img.flynncao.uk/20240901230543.png" alt="" /></p>
<p>a1「彼女は受かったとは限らない。僕は小市民失格だね」(02:45)</p>
<p>「限らない」是“不尽然”（not necessarily）的意思， 但后半句更需要谨慎处理 。</p>
<ul>
<li>
<p>ChatGPT (4o)：她不一定考上了吧。我真是个不合格的小市民啊</p>
</li>
<li>
<p>喵萌奶茶屋 (Nekomoe Kissaten)  ： 她不一定也考上了，看来我算不上合格的小市民</p>
</li>
<li>
<p>北宇治（KitaujiSub)  ：说不定她没考上， 作为小市民，我真是不应该啊  :no_entry:</p>
</li>
</ul>
<blockquote>
<p>后句有点强行增加定义的感觉 ，简洁性丧失了 （ 「は」虽然可以表定义，但没必要乱用）。</p>
</blockquote>
<ul>
<li>SweetSub ： 她不一定也被录取了，我这个小市民做的不够格啊</li>
<li>诸神字幕组 ： 她不一定考上了，看来我没资格当小市民 :star:</li>
</ul>
<blockquote>
<p>后半句巧妙地用“看来”做连接来做结论。</p>
</blockquote>
<ul>
<li>千夏字幕组： 她不一定也考上了，看来我还不够小市民</li>
</ul>
<blockquote>
<p>也是换了一种翻译方式，和喵萌、巴哈姆表达的意思相同。</p>
</blockquote>
<p>「熟人」在汉语词典中的意思是熟识（对某人认识得比较久或对某件事物了解得比较透彻）的人。而在日语中仅仅比点头之交要好上一点点，相当于英文的"acquaintance"。按关系排序可以大致分为：</p>
<p><strong>親友（しんゆう / Shinyū）</strong>：最亲密的朋友，通常是非常信任和亲近的人，常常与家人一样重要。</p>
<p><strong>友達（ともだち / Tomodachi）</strong>：朋友，这个词表示较为亲近的关系，但不如“親友”那样深厚。</p>
<p><strong>知り合い（しりあい / Shiri-ai）</strong>：熟人，表示你认识但关系不特别亲近的人，通常有一些基础的了解和互动。</p>
<p><strong>顔見知り（かおみしり / Kao-mishiri）</strong>：只是面熟，指的是你认识的人，但交流非常有限，关系较远。</p>
<p><img src="https://cfr2-img.flynncao.uk/20240901222449.png" alt="" /></p>
<p>b1 在这里把日语的“知り合い”和“熟人”在翻译是画等号是绝对不可以的。<a href="https://metalife.co.jp/business-words/2464/#3">参考: 知り合い和友達的区别</a></p>
<blockquote>
<p>经过调研和讨论，发现是大家对于“熟人”表达亲还是疏的看法上有区别，欢迎在评论区讨论！</p>
</blockquote>
<ul>
<li>
<p>ChatGPT (4o): 这种事情，没办法跟朋友或熟人说啊...</p>
</li>
<li>
<p>喵萌奶茶屋(Nekomoe Kissaten)：抱歉啦，这种话没法说给朋友或者熟人听</p>
</li>
<li>
<p>北宇治(KitaujiSub）：对不起，这些话对朋友熟人都说不出口</p>
</li>
<li>
<p>轻之国度(LKSub)：对不起哦，这种事可不能讲给朋友和那些熟人们听</p>
</li>
</ul>
<p>作为我参考用的巴哈姆（台湾）和英文字幕反而我认为翻译的更合理。</p>
<ul>
<li>
<p>巴哈姆: 我沒辦法跟朋友或者認識的人聊這種事。</p>
</li>
<li>
<p>EN: I can't talk about this with any of my friends or acquaintances.</p>
</li>
</ul>
<h4>西洋语</h4>
<p>即使作品或脚本不刻意使用英文（或者其他非东亚外来语），日语词汇中大量的西洋语借用也是现象和趋势，有时候<a href="https://x.com/teruko1206/status/1241656603960471552">甚至不如</a>用汉字解释易懂。</p>
<p>再者，即便九年义务教育规定了英语需要的词汇量（3000词汇）， 译者也不应该因为自己看得懂就假设所有观众看得懂所谓的“基础词汇”，既主观又懒散。</p>
<p>更何况，以下例子中的词汇已经超纲：</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20240911222452214.png" alt="image-20240911222452214" /></p>
<p>d「ドメスティックバイオレンス = 家庭暴力（Domestic Violence）」</p>
<p>这里只有【巴哈姆】和【拨雪寻春】给了中英文标注。</p>
<p>而到<strong>吃喝用度</strong>上，翻译的时候更需要额外小心。</p>
<p>《私の幸せな結婚》：「ミルクキャラメル」（milk caramel) -&gt; 牛奶焦糖，为了避免更多歧义直译为“牛奶糖” 就好，翻译成性质和做法完全不同的“方糖”（拨雪寻春）的做法是不能被接受的。</p>
<h3>语法</h3>
<h4>解释的“度”</h4>
<p>由于汉语日语语法结构、连接词差异，处理的时候需要格外小心避免过度解释。</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20240901230629439.png" alt="image-20240901230629439" /></p>
<p>a「なんたって、家中甘い匂いがずーっと漂ってるから...」(04:27)</p>
<ul>
<li>
<p>ChatGPT (4o): 毕竟，家里一直弥漫着甜甜的香味……</p>
</li>
<li>
<p>喵萌奶茶屋 (Nekomoe Kissaten)  ：毕竟家里总是飘着甜品的味道</p>
</li>
<li>
<p>北宇治（KitaujiSub)  ：毕竟，我家里就随时都飘荡着甜点的气味 :no_entry:</p>
</li>
</ul>
<blockquote>
<p>和之前的问题一样，用词不够简洁。“随时” .. “都“ 总有画蛇添足之感。”甜点的气味” 虽然是译者根据上下文「甘いもの - 甜点」引入，但在后句强行插入有些过于主观，减少了惊喜感的同时句子太过冗余。</p>
</blockquote>
<ul>
<li>SweetSub： 毕竟，我家里时时刻刻都飘着甜味  :star:</li>
</ul>
<blockquote>
<p>“时时刻刻”照应ずーっと的拖长显得恰到好处，【甜味】干净利落加分</p>
</blockquote>
<ul>
<li>诸神字幕组 ：毕竟家里总是一股甜甜的气味  :star::star:</li>
</ul>
<blockquote>
<p>除了不拘泥于日文翻译外，还从文字描述了给观众想象的空间</p>
</blockquote>
<ul>
<li>千夏字幕组： 毕竟 家里一年四季都飘散着甜味</li>
</ul>
<blockquote>
<p>虽然很努力的做了翻译，但一年四季不适合这个场景，这里更强调“持续性”而不是“跨度”</p>
</blockquote>
<h4>省略</h4>
<p>日语是个讲话很<strong>微妙</strong>的语言，比中文有过之而无不及。以至于通过助词连词与读空气结合来表情达意的场景很多见。</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20240901230737087.png" alt="image-20240901230737087" /></p>
<p>a「羨ましい...」「毎日だとさすがに...」(04:31)</p>
<ul>
<li>
<p>ChatGPT (4o): 真让人羡慕; 如果每天这样的话，果然...</p>
</li>
<li>
<p>喵萌奶茶屋 (Nekomoe Kissaten)  ：天天闻就顶不住了 :no_entry:</p>
</li>
</ul>
<blockquote>
<p>“顶不住了” 的意思是思接近于“扛不住了”或“撑不住了”，这种<a href="http://www.lxybaike.com/index.php?doc-view-4628.html">网络用语</a>放在翻译中是经不起时间考验的。</p>
</blockquote>
<ul>
<li>北宇治（KitaujiSub)  ：每天都闻的话还是..</li>
<li>SweetSub ： 每天都这样还是太过了...:star:</li>
</ul>
<blockquote>
<p>“太过了”完美地说出了日语省略的意味，配上男主无奈的表情天衣无缝</p>
</blockquote>
<ul>
<li>诸神字幕组：天天闻都闻腻了 :star:</li>
</ul>
<blockquote>
<p>同样是解释省略，这里给出了另外一个版本，表达意思没区别，全看个人喜好</p>
</blockquote>
<ul>
<li>千夏字幕组： 可每天都是的话...</li>
</ul>
<blockquote>
<p>试图直译，但在这种场景下中文并不能很好地表达出省略的意味</p>
</blockquote>
<h4>动词活用</h4>
<p>不存在的时态活用，语法书中提及的<strong>日语可能态</strong>其实是<strong>可行态</strong>, 用于客观描述动作发生的可能性。 (07:50)</p>
<p>例如：「食べる」：吃-&gt;「食べられる」吃的可能性有、能吃；不能吃-&gt;食べられ＋ない （否定型）：吃的可能性无。</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20240901230832465.png" alt="image-20240901230832465" /></p>
<p>a「盗まれるようなものは思えないけど...」(07:50) <a href="https://ja.hinative.com/questions/3883926">参考: 语法</a></p>
<ul>
<li>
<p>ChatGPT (4o): 感觉不像是会被偷的东西...</p>
</li>
<li>
<p>喵萌奶茶屋 (Nekomoe Kissaten)：我不觉得这里面有什么值得偷的</p>
<blockquote>
<p>另外一个合适的翻译版本，但缺点是太长。</p>
</blockquote>
</li>
<li>
<p>北宇治（KitaujiSub)：听起来不像是会被偷的东西</p>
<blockquote>
<p>听起来也能表达“我觉得”的意思，无功无过。</p>
</blockquote>
</li>
<li>
<p>SweetSub：不像是会被偷的东西呢...  :star:</p>
<blockquote>
<p>贴切且能表达愿意的表达，【盗まれるような】化为定语照顾了中日用法。</p>
</blockquote>
</li>
<li>
<p>诸神字幕组：这些东西没什么好偷的</p>
</li>
<li>
<p>千夏字幕组：感觉都不是会招贼的东西</p>
<blockquote>
<p>很接地气的翻译。</p>
</blockquote>
</li>
</ul>
<p><strong>使役被动（逼迫）</strong></p>
<p>即便在日语中使用频率较低，「~（あ）させられる」在省略或者口语中常用「～(あ）される」这样的形式，和”上文提到的“可行态“无关。在感官动词例如听、 说、 读、 写、 下，更多描述的是被动、需要忍耐的场景。<a href="https://ameblo.jp/shizaibuzhidao/entry-12510116016.html">参考</a></p>
<p><img src="https://cfr2-img.flynncao.uk/20240901220136.png" alt="" /></p>
<p>b「あの2人がヂュエットしてるの聴かされるんだよ！」(09:35) = 「あの2人がヂュエットしてるの聴かせられるんだよ！」</p>
<ul>
<li>
<p>ChatGPT (4o)：我听到了那两个人在对唱！/ 我被迫听到那两个人在对唱！</p>
</li>
<li>
<p>喵萌奶茶屋(Nekomoe Kissaten)：我肯定会听到那两个人情侣对唱啊！</p>
<blockquote>
<p>这里只有喵梦表现出了一丝“被迫”的氛围</p>
</blockquote>
</li>
<li>
<p>北宇治(KitaujiSub）：那可是会听到他们对唱情歌的啊！ :no_entry:</p>
</li>
<li>
<p>轻之国度(LKSub)：那两人会在我面前对唱的啊！:no_entry:</p>
</li>
</ul>
<h4>使役可行</h4>
<p>如果没有上文说的常用省略，「~（あ）させられる」形式的词区分<strong>使役被动</strong>还是<strong>使役可行</strong>会变得非常困难。<a href="https://ja.hinative.com/questions/23401694">参考语法1</a>， <a href="https://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q10137159955">参考语法2</a> 。</p>
<p>同样在这句「こんな話、友達や知り合いには聞かせられないから...」的意思是：这种话，我不能让朋友和认识的人听到。在分析主语（自己）和对象（朋友和认识的人）过后结论就一目了然了。</p>
<h4>书面语</h4>
<p>现代汉语用到书面语和古语较日语（尤其尊敬语中）为少见。但细心处理可以让观感更上一层楼。</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20240911221139567.png" alt="image-20240911221139567" /></p>
<p>d「これは神作認定せざるを得ない」= 「これは神作認定するしかない」不得不.. must do, nothing but do, have to do</p>
<ul>
<li>
<p>ChatGPT (4o): 这真是不得不认定为神作。</p>
</li>
<li>
<p>拨雪寻春(Haruhana)：哇 这些不得不奉为神作了 :star: 「奉为圭臬」的活用，既不增加额外词量又表达了愿意</p>
</li>
<li>
<p>霜庭云花(STYH)： 哇 这可不得不承认是神作了</p>
</li>
<li>
<p>云光字幕组：哇 这不得不认定为神作了</p>
</li>
</ul>
<h4>中文不存在的语法或细节</h4>
<p>「たら」作为最常见的假设、因果适用范围极广，「なら」在表示希望、命令、臆测、建议等个人意愿时较为常用。 <a href="https://www.coelang.tufs.ac.jp/mt/ja/gmod/contents/explanation/083.html">参考语法1</a> , <a href="https://blognihongo.com/n4/grammar_nara/#i-4">参考语法2</a></p>
<blockquote>
<p>这点英文解释起来都要比中文容易、好理解的多：Hypothetical or Assumed Condition, Subjectivity。（假设的、预判的情况，主观地）</p>
</blockquote>
<p>例1：</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20240901230930363.png" alt="image-20240901230930363" /></p>
<p>a 「でも、お前らには分かるだろ？付き合ってるなら。」 (16:55)</p>
<p>在当前的语境中里翻译出来差异，并不会让整句话看起来更冗长。</p>
<ul>
<li>
<p>ChatGPT (4o)：但是，你们应该能明白吧？如果在交往的话。</p>
</li>
<li>
<p>喵萌奶茶屋 (Nekomoe Kissaten) ：但是你们两个应该能理解的吧，如果你们在交往的话 :no_entry:</p>
<blockquote>
<p>滥用如果</p>
</blockquote>
</li>
<li>
<p>北宇治（KitaujiSub) ：你们应该是明白的吧，既然你们在交往的话  :star:</p>
</li>
<li>
<p>SweetSub ： 不过你们应该能理解的吧？既然你们已经在交往了  :star:</p>
</li>
<li>
<p>诸神字幕组 ：不过既然你们在交往 那应该能体谅我吧？</p>
<blockquote>
<p>我认为这里译者的改动并不是减分项，在这种语境下【强求体谅】反而反映了角色的心情</p>
</blockquote>
</li>
<li>
<p>千夏字幕组：但是你们应该能理解我吧 既然你们在交往</p>
<blockquote>
<p>句子没问题..但没结尾的“的话” “了” 中文上很奇怪</p>
</blockquote>
</li>
</ul>
<p>例2：</p>
<p><img src="https://cfr2-img.flynncao.uk/20240901165442.png" alt="" /></p>
<p>c「虎視さんが鹿部に入部してくれてなら安心ね。」</p>
<p>这里虽然也出现了「なら」，但考虑到行文流畅，可以用“会”，“...的话"，要比”既然“更自然。很多时候借用中文的一些简单连词既契合日文的原意，又不会让句子显得又臭又长。</p>
<ul>
<li>
<p>ChatGPT (4o): 虎视加入鹿部的话，那就放心了。</p>
</li>
<li>
<p>喵萌奶茶屋(Nekomoe Kissaten)：虎视同学愿意加入鹿部我就放心了</p>
<blockquote>
<p>用 “如果”不是灾难性的，但也没了无主观“推测”意味</p>
</blockquote>
</li>
<li>
<p>北宇治(KitaujiSub）：鹿社有虎视同学加入，我就放心啦 :star: :star:</p>
<blockquote>
<p>最贴切的翻译，将本来就“模糊”的假设也模糊处理，也有主观“推测”事实</p>
</blockquote>
</li>
<li>
<p>SweetSub：你会加入鹿社的话我就放心了  :star:</p>
<blockquote>
<p>这里使用了第二人称，也有主观“推测”意愿</p>
</blockquote>
</li>
<li>
<p>爱恋&amp;漫猫字幕组(Comiccat&amp;KissSub)：如果是虎视同学能加入鹿部的话，我就放心了 :no_entry:</p>
<blockquote>
<p>用 “如果”不是灾难性的，且"是“ 和"“能...”总有一个画蛇添足，减分</p>
</blockquote>
</li>
</ul>
<h3>差异</h3>
<h4>地区、生活环境</h4>
<p>虽然日本动画在世界各地都有观众，但绝大部分受众是日本人，对本地的地名、景点要更熟悉些。这时候如果直译有可能损失笑点、梗点，加上注释会好很多。第二种方式则是直接二创传达出原句想传达的梗。</p>
<p><img src="https://cfr2-img.flynncao.uk/20240901164400.png" alt="" /></p>
<p>c「あー東京じゃない　千葉のネズミなんたらで売ってるあれかー」</p>
<ul>
<li>
<p>ChatGPT (4o): 啊——不是东京，是在千叶的某个鼠标什么的地方卖的那个啊。</p>
</li>
<li>
<p>喵萌奶茶屋(Nekomoe Kissaten)：是东京...不对。是在千叶的迪士尼卖的那种吧 :star:</p>
</li>
<li>
<p>北宇治(KitaujiSub）：啊，这是东京...啊呸呸呸，千叶迪鼠尼乐园里卖的那个吧 :no_entry:</p>
<blockquote>
<p>暂不讨论行文是否画蛇添足，这个“迪鼠尼”的幽默感不知道从何而来</p>
</blockquote>
</li>
<li>
<p>SweetSub：喔 是东京...不对，千叶的迪士尼什么园卖的那个头饰 :star: :star:</p>
<blockquote>
<p>完美的翻译，「なんたら」表示的不确定巧妙地安插在了合适的位置。此外这里还贴心的加上了科普，照顾国外观众。「アレ」这里代指泛“头饰”的东西，表达出来要比忽略掉好。</p>
</blockquote>
</li>
<li>
<p>爱恋&amp;漫猫字幕组(Comiccat&amp;KissSub)： 是东京...不对，是在千叶的迪士尼卖的那种吧 :star:</p>
</li>
</ul>
<h4>职业</h4>
<p>类似的工作，因为地区的不同叫法也不同（即使是用汉字也会有相当大的区别）。</p>
<p><img src="https://cfr2-img.flynncao.uk/20240901164227.png" alt="" /></p>
<p>c「おこたん＆こしたんって感じでよかろ？お笑いコンビか！」(14:52)</p>
<p>我们先看<strong>お笑いコン ビ</strong>具体是什么东西：二人組で漫才やコントお笑い番組への出演など活動を行っている芸人のこと -&gt; 進行漫才、短劇、喜劇節目演出等活動的一對喜劇演員。稍微翻几个Youtube视频就可以发现搞笑艺人不会局限于一种表现形式（而且是更现代的表现形式）。二人转、相声、小品都包了的感觉。这里翻译成其中任何一种来对照是很不合适的。保留“原文”反而是正确的做法：お笑いコンビ -&gt;  搞笑艺人、搞笑二人组。</p>
<p><em>相关词条：お笑い芸人</em></p>
<ul>
<li>
<p>ChatGPT (4o): “感觉像是‘小被子’和‘小串’吧？是搞笑组合吗！</p>
</li>
<li>
<p>喵萌奶茶屋(Nekomoe Kissaten)：搞笑组合</p>
</li>
<li>
<p>北宇治(KitaujiSub）：搞笑艺人组合 :star:</p>
</li>
<li>
<p>SweetSub：相声组合 :no_entry:</p>
</li>
<li>
<p>爱恋&amp;漫猫字幕组(Comiccat&amp;KissSub)：搞笑艺人组合 :star:</p>
</li>
</ul>
<h4>文化用词</h4>
<p>「懇親会」，这个词在日文中更侧重于“加深同一个组织内彼此之间的感情的同僚聚会”，也就是我们所谓的【联谊会】。 但与“高岭之花”等中文观众根据上下语境能勉强猜到大致意思相比，这个词会让中文观众更摸不着头脑甚至误解，是“家长会”吗？ <a href="https://event.neodining-catering.com/usefulinfo/konshinkai_howto/">参考</a></p>
<p><img src="https://cfr2-img.flynncao.uk/image-20240929162648071.png" alt="image-20240929162648071" /></p>
<p>j「唯一現れるのは息子が通う名門校で定期的に開かれる懇親会のみ」</p>
<ul>
<li>
<p>ChatGPT (4o): 唯一出现的场合是我儿子就读的名校定期举办的联谊会。</p>
</li>
<li>
<p>喵萌奶茶屋 (Nekomoe Kissaten)：他只会在他耳机所上的名校定期举办的恳亲会上出现 :no_entry:</p>
</li>
<li>
<p>诸神字幕组：就是他儿子就读的那所名校的定期联谊会 :star:</p>
</li>
<li>
<p>千夏字幕组：只有他儿子就读的名校定期举行的交流会是个意外</p>
</li>
</ul>
<p>成语、常用语也是，尽管中日文化圈有很多重合，但一些惯用语直接拿过来即使是直译也会让人摸不着头脑。</p>
<p>d「久世くんが早起きするなんて、今日は雪でも降るのかしら」   <a href="https://ja.hinative.com/questions/19111737">熟语参考</a></p>
<p><img src="https://cfr2-img.flynncao.uk/image-20240929173932222.png" alt="image-20240929173932222" /></p>
<ul>
<li>ChatGPT (4o): 久世居然这么早起床，今天会下雪吗？</li>
<li>喵萌奶茶屋：竟然能看到久世早起，怕不是太阳从西边出来了</li>
<li>拨雪寻春：久世你居然早起了，真是太阳从西边出来了</li>
<li>云光字幕组：久世你竟然会早起，怕不是今天会下雪了 :no_entry:</li>
<li>霜庭云花：久世居然会早起，太阳是要从西边出来了吗</li>
</ul>
<h4>圈内圈外（漫画动画）</h4>
<p>叠甲：相较于网络上10~20年的不等的阅番经历——动漫高手，&lt;del&gt; 抛开10年海米身份不谈&lt;/del&gt;我真正入宅也仅仅4-5年，但很多圈内用词可能已经存在10年以上了。如有忽略的不在讨论范围，这里仅仅对发现的进行解释和判定。</p>
<ul>
<li><a href="https://zh.moegirl.org.cn/zh-hant/%E5%B0%8A">尊い</a>（とうとい）</li>
</ul>
<p><img src="https://cfr2-img.flynncao.uk/20241014154050.png" alt="" /></p>
<p>在这里用于面对角色之间（包括但不限于爱情、友情、亲情等）的亲密互动，用于表示心中盛赞之情。知道使用场景之后，翻译就很简单了。</p>
<ul>
<li>
<p>拨雪寻春(Haruhana)：太赞啦</p>
</li>
<li>
<p>霜庭云花(STYH)：太难得了</p>
</li>
<li>
<p>云光字幕组：太棒了</p>
</li>
<li>
<p>喵萌奶茶屋(Nekomoe Kissaten)： 太尊了 :no_entry:</p>
</li>
<li>
<p>巴哈姆：真是太尊了 :no_entry:</p>
</li>
</ul>
<p>减分的原因很简单，新人看不懂。需要一定阅番量甚至要主动查询。</p>
<h3>读空气</h3>
<p>众所周知，日本文化=空气文化。通过理解氛围也可以帮助翻译，在一些省略或者日常对话尤为常见。</p>
<p>在回应假设或者反问时，中文和日语一样通过否定对方的“反问”或“假设”来做出回应，例如：</p>
<p><strong>中文</strong>
A: “你不是不喜欢吃甜食吗？”
B: “不，我很喜欢。” （明确否定假设）</p>
<p><strong>日语</strong>
A:「甘いものが嫌いじゃない？」
B: 「いや、好きだよ。」（明确否定假设）</p>
<p><strong>英语</strong>
A: "Don’t you dislike sweet food?"
B: "Actually, I love it."（直接陈述事实，表明自己喜欢吃甜食）</p>
<p>在这个长对话中，需要理解语境&amp;空气，这时候不同的字幕组就出现了偏差：</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20240904231122646.png" alt="image-20240904231122646" /></p>
<p>《 BanG Dream! It's MyGO!!!!! 》 ： <em>示例翻译取自【巴哈姆】</em> （19:12）</p>
<p>「anon: またダメになるってなんて？前のバンド結構モメちゃったの？」-&gt; 为什么你会觉得玩乐团会以失败收场？之前待的乐队闹得不愉快吗？</p>
<p>「anon:  まさか、あれ？音楽性の違うとか？ 」-&gt; 还是说那个？音乐性的差异？ :bulb: 推测</p>
<p>「tomori: 違うと思う... 」= ?</p>
<p>「anon: 違うか.... 」 = ?  :pensive: 泄气</p>
<p>「tomori: 多分、私のせい」我想...应该是我造成的 :right_anger_bubble: 解释</p>
<p>也就是说，2句的tomori的回答让anon由兴致勃勃转为泄气 -&gt; tomori对这种推测给出了否定的回答，后面也加以解释了自己认为的原因（是自己的错）。再者，日语日常对话通过“重复对方发言”来表达附和、赞同的复读机发言几乎不存在，&lt;del&gt; 有一万种替代方法：そうだと思う(我觉得是的)， うん、そうだね（嗯，是这样捏）うん、そうかも （嗯，有可能），その通りだと思う （我觉得你说对了）&lt;/del&gt;</p>
<p>结论一目了然了。</p>
<ul>
<li>喵萌奶茶屋：tomori: 诶？我觉得不同。anon：不同啊  :no_entry:</li>
<li>离谱Sub： tomori: 诶？我觉得应该不是。anon：不是吗 :heavy_check_mark:</li>
<li>霜庭云花：tomori: 诶 我想不是的。 anon： 不是啊 :heavy_check_mark:</li>
</ul>
<h2>按字幕组测评</h2>
<p>在完成上述部分后，我发现即使有字幕组在某些因素上有出彩之处，但仅仅凭借数个“闪光点”、 "谬误"来定夺实在有些武断。因此对于以上提及的每个字幕组我都查找了最近2到3年的作品，每个字幕组3到5个番剧不等（如果没有特别指出是哪一集，那就是S1 第一集）。具体情况如下，这里只会给出：好 ：+1，+0 ：一般， 差： -1 三个级别，和上一章的表现结合后最终给每个字幕组的分番剧的表现和综合评级：</p>
<p>&lt;u&gt;+0的标准为不自然的翻译（这里较为主观）低于10处；且错翻漏翻少于5处，也包含了听写错误,+0不会导致剧情或细节理解错误，但+1的翻译作品观赏起来会很轻松享受&lt;/u&gt;</p>
<table>
<thead>
<tr>
<th>#</th>
<th>标题</th>
<th>日语标题</th>
<th>推荐（+1）</th>
<th>合格（+0）</th>
<th>不推荐（-1）</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>小市民系列</td>
<td>〈<em>小市民</em>〉シリーズ</td>
<td>SweetSub，千夏</td>
<td>喵萌奶茶屋，诸神，云光字幕组</td>
<td>北宇治</td>
</tr>
<tr>
<td>b</td>
<td>败犬女主太多了！</td>
<td>負けたヒロインが多すぎる</td>
<td></td>
<td>北宇治</td>
<td>喵梦奶茶屋</td>
</tr>
<tr>
<td>c</td>
<td>鹿乃子乃子乃子虎视眈眈</td>
<td>しかのこのこのここしたんたん</td>
<td>SweetSub</td>
<td>北宇治，喵梦奶茶屋</td>
<td></td>
</tr>
<tr>
<td>d</td>
<td>不时以俄语遮羞的邻桌艾莉同学</td>
<td>時々ボソッとロシア語でデレる隣のアーリャさん</td>
<td>拨雪寻春</td>
<td>喵萌奶茶屋</td>
<td>云光字幕组，霜庭云花</td>
</tr>
<tr>
<td>e</td>
<td>葬送的芙莉莲 前半</td>
<td>葬送のフリーレン</td>
<td>喵萌奶茶屋</td>
<td>千夏，北宇治</td>
<td>桜都</td>
</tr>
<tr>
<td>f</td>
<td>BanG Dream! It's MyGO!!!!!</td>
<td>BanG Dream! It's MyGO!!!!!</td>
<td></td>
<td>霜庭云花，喵萌奶茶屋</td>
<td>离谱Sub</td>
</tr>
<tr>
<td>g</td>
<td>孤独摇滚</td>
<td>ぼっち・ざ・ろっく!</td>
<td>千夏</td>
<td>喵萌奶茶屋</td>
<td>桜都</td>
</tr>
<tr>
<td>h</td>
<td>能干的猫今天也忧郁</td>
<td>デキる猫は今日も憂鬱</td>
<td></td>
<td>诸神</td>
<td></td>
</tr>
<tr>
<td>i</td>
<td>别当欧尼酱了！</td>
<td>お兄ちゃんはおしまい！</td>
<td>SweetSub，千夏</td>
<td>喵萌奶茶屋</td>
<td></td>
</tr>
<tr>
<td>j</td>
<td>间谍过家家</td>
<td>Spy × Family</td>
<td>千夏，喵萌奶茶屋</td>
<td>桜都</td>
<td>诸神</td>
</tr>
<tr>
<td>k</td>
<td>电锯人</td>
<td>チェンソーマン</td>
<td>云光字幕组，桜都</td>
<td>幻樱</td>
<td></td>
</tr>
<tr>
<td>l</td>
<td>我的幸福婚约</td>
<td>わたしの幸せな結婚</td>
<td>拨雪寻春，喵萌奶茶屋</td>
<td></td>
<td></td>
</tr>
<tr>
<td>m</td>
<td>迷宫饭</td>
<td>ダンジョン飯</td>
<td>喵梦奶茶屋，桜都</td>
<td>云光字幕组，幻樱字幕组</td>
<td></td>
</tr>
<tr>
<td>n</td>
<td>ATRI: My Dear Moments</td>
<td>ATRI -My Dear Moments</td>
<td></td>
<td>霜庭云花</td>
<td>澄空学园</td>
</tr>
<tr>
<td>o</td>
<td>终末列车开往何方？</td>
<td>終末トレインどこへいく？</td>
<td>北宇治</td>
<td>喵萌奶茶屋</td>
<td>亿次研同好会</td>
</tr>
<tr>
<td>p</td>
<td>我推的孩子</td>
<td>【推しの子】</td>
<td>云光字幕组</td>
<td></td>
<td></td>
</tr>
<tr>
<td>q</td>
<td>请问您今天要来点兔子吗？ S1</td>
<td>ご注文はうさぎですか？</td>
<td>诸神，千夏</td>
<td>B站官方，澄空学园&amp;华盟</td>
<td>TSDM，TUcaptions</td>
</tr>
<tr>
<td>r</td>
<td>恋语轻唱</td>
<td>ささやくように恋を唄う</td>
<td></td>
<td></td>
<td>亿次研同好会</td>
</tr>
</tbody>
</table>
<p>这里是所有字幕组对测评过的每一部番的<a href="https://flynncao.notion.site/1113bae1a54280ab8f61ff1b50f0e8d8#1113bae1a5428045b0fcf3f8848653fd">Notion笔记</a>，非常混沌。之前有一部分测评是我记录在纸笔上的所以并没有100%留存，但评价标准是一致的。</p>
<p>以下是所有字幕组测评结果的总结和出现的问题，如果没有标注剧集号那么就是第一季第一集，加粗为完整测评：</p>
<blockquote>
<p>助记符号说明：x （错误或者不自然）；o (正确或者直译)；【+】【PLUS】（增加了直译没有的意思）；【-】【MINUS】漏掉了直译没有的意思。</p>
</blockquote>
<h3>+2 SweetSub</h3>
<p>SweebSub的优点是翻译水平和中文俱佳，这点在他们融合转化的时候可以做到简洁得体。具体的话，以我评测最多最典型的《小市民系列》ep1来说：</p>
<p>頭を使うこと-&gt; 动脑子的事； ...押しつけて. -&gt; 强推；別にいいけど-&gt; 行吧；無理に搜そうっていったんじゃないのかな？-&gt; 硬要帮你去找的啊？； ここからは推測<strong>だけど</strong>...-&gt;这部分<strong>只</strong>是我的推测...</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20241007014511606.png" alt="image-20241007014511606" /></p>
<p>(图文无关)</p>
<h3>+2 千夏字幕组</h3>
<p>相较于【SweetSub】的处处可圈可点，千夏放在这里的原因是：行文几乎看不到不自然的地方。即使也不是十全十美，但相对其他字幕组，【千夏】已经尽力做到了较少出错。</p>
<p>出错的部分：</p>
<p>《葬送的芙莉莲》：それも含めて解読をお願いしたいのです-&gt; 除了这本书还有其他书需要解读 x 包含鉴定真伪在内，希望你解读这本书。</p>
<p>《Spy x Family》: おにさんこちら-&gt; 哥哥这边。这里错误在于“おにさんこちら” 是日本儿童「鬼ごっこ」捉鬼游戏的话术（“鬼先生来这边..”的直译是对的）</p>
<h3>+1 拨雪寻春</h3>
<p>【拨雪寻春】倾向于使用一些不太白话甚至古风的话术，这和我的所谓“好翻译”的标准有出入，尽管如此，拨雪寻春的作品具有独特的参考价值。</p>
<ul>
<li>大多时候是锦上添花：</li>
</ul>
<p>这点在《我的幸福婚约》这部番中将优点发挥的淋漓尽致：</p>
<p><img src="https://cfr2-img.flynncao.uk/Snipaste_2024-10-05_21-15-18.png" alt="" /></p>
<p>「桜吹雪は、頬を濡らす雨；はらはら舞う雨の中で、私はひとりで泣いている」-&gt; 纷樱如雪，似碎雨拂面；烟雨朦胧，我兀自垂泪（直译：樱花飞舞如同沾湿脸颊的雨；在那片轻轻飘舞的雨中，我独自一人哭泣。）</p>
<p>「まるで雪のなかで芽吹いた花のように」-&gt; 如拨雪寻春觅得芳枝萌芽 。（直译：就像雪中绽放的花朵）</p>
<p>此外还有很多文邹邹但合理的词、用法和称谓，在众多字幕组中独树一帜。</p>
<p>父上、ちち、お父さん お父さま-&gt; 令尊（对外敬称）、家父（对外自称）、父亲 父亲大人（对内尊称）、旦那様（老爷）</p>
<p>嫁行った-&gt;出阁; ~を好きにはさせない-&gt;肆意妄为；あさましい-&gt;既惭且愧；いい笑顔を-&gt;笑靥如花；後ろめたく思う必要も-&gt;更不要自怨自艾；長旅お疲れさま！-&gt; 舟车劳顿一路辛苦了！；苦労知らずの夢の住人みたいな感じで聞こえるわ-&gt;何不食肉糜。</p>
<ul>
<li>有时候也会翻车：</li>
</ul>
<p>《夏日重现》片头曲: そんな夏だけが残っていく-&gt; Only this summer remains; 只剩下这样的夏天； -&gt; 这样的夏日何足怜惜；<em>何足</em>相关的词语几乎都表示“哪里值得，不值得”，这里并不符合主流翻译的做法。</p>
<blockquote>
<p>引用译者自己的说法：日本动画歌词中，有一部分往往很抽象，散乱、率性、抒情，意识流的表达方式让人难以理解，不知所云。所以个人倾向于将其“参透”，把省略或隐藏的深层意思，以适当的方式体现在中文翻译中（不是直接戳破，仍要保持一定的隐晦与含蓄）。与其一味地去迎合观者，不如以自己的风格创造观者。</p>
</blockquote>
<p>《葬送的芙莉莲》：「もっと綺麗にみえる場所知ってるから案内するよ」。我带你们去一个更适合观星的地方： “观星”容易让人联想到占卜造成误解，直译会更好。</p>
<blockquote>
<p>引用译者自己的说法：个人以为「观星」和「占星」有着明显的区别，结合剧情应该不至于造成歧义。不过「观星」在现代语境中，多指天文爱好者观察天体，和单纯欣赏星空亦有少许差异。</p>
</blockquote>
<h3>+1 喵萌奶茶屋</h3>
<p>喵萌奶茶屋是目前字幕组业务最广的一个 (以2024.7月番为例有惊人的22部产出），难以避免的会有上下限问题。</p>
<p>但就我的测评结果来看大多数都是合格水准，少数出彩。由于是双语字幕且注释用心，没有更好的选择情况下可以无脑入。</p>
<p>因为不会对上下文做过多的臆测，反而翻车的概率很低。</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20241006111420714.png" alt="image-20241006111420714" /></p>
<blockquote>
<p>例如这句完全直译 具体怎么回事让观众自己猜吧！</p>
</blockquote>
<h3>+0 北宇治</h3>
<p>同样业务范围很广的北宇治，虽然直译水平没问题，但有时候会被溢出的个人风格而影响，时常会影响观感。</p>
<p>それはノーカン（no-count）だろう～-&gt; 不作数（ 口语多用“不算数”）</p>
<p>幼馴染みみたいものだね。-&gt; 那基本就是从小一起长大的了（直译：就像青梅竹马一样是吧）</p>
<p>低级错误也是时有发生：</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20241006121254891.png" alt="image-20241006121254891" /></p>
<blockquote>
<p>这里正解是「弁当オプション」(bento option) 租界女友服务中的一种</p>
</blockquote>
<h3>+0 诸神字幕组</h3>
<p>诸神是老牌双语字幕组之一，涉猎广泛。包括但不限于纪录片、漫画、电视剧等，但本篇文章重点不是比资历或者贡献。诸神在最近几年动漫的翻译作品缺点在于：画蛇添足，虽然没到我行我素的地步。这点仁者见仁智者见智。</p>
<p>以最典型的《间谍过家家》（S1）为例：</p>
<p>逆に不安だ-&gt; 令人起疑?；マニュアル(manual)---&gt;【+ 育儿】手册； 施設-&gt; 福利机构；まさか黄昏の... -&gt; 难道是黄昏的【+仔】；ちびゃああ-&gt; 我怕怕啊；どれにしようかな.<em>.ep1 21:09</em> -&gt; 哪 里 不 会 点 哪 里（直译：应该选哪个好呢..)；エレガンス(elegance)に失ける者ばかりだ- &gt;【+秉性】都不够优雅；ep4 17:28 ス（スパイ）..すぱらしい「心のお医者さん」です-&gt; 间...简直是治疗心灵的神医（为了日语谐音梗凑了汉语谐音， 直译为：非常优秀的心理治疗师）</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20241006145543698.png" alt="image-20241006145543698" /></p>
<p>其他番剧也有类似的plus（自行添加）环节：</p>
<p>小市民ep3： 「一人で笑ってる？」-&gt; 你一个人在【+傻】笑什么呢？;「A:テストどうだった？B:生物で...ちょっと」但是生物【+有道题挂了】（直译：生物有点...);　「 でも、私、何もしたないの..なにも..」-&gt; 但我什么都没做过，我没错（直译：但我什么都没做过..什么都..)</p>
<p>错误很少，出现的地方但也非致命：</p>
<p>Spy x Family S1 [ep4]「任務が失敗になったら学校行かないと、一緒が終わっちゃう」-&gt; 要是任务失败了，小孩就该上学， 就不能在一起了 × ； 如果任务失败了，就不能去学校，那我们的关系就会结束。√</p>
<p>能干猫今天也忧郁： [ep1] 「ピーマンは縦方向に、短冊切りにして..」-&gt; 切短条？（其实是切长条）;ワインビネガー-&gt;醋（其实是红酒醋）[ep4] 「優芽ちゃんはUMYU-Seaのどんなとこが一番好きなの？) -&gt; 优芽，你为什么喜欢UMYU-Sea啊？（其实是：优芽，你最喜欢UMYU-Sea的哪个地方呢？）</p>
<h3>+0 霜庭云花</h3>
<p>与诸神的“说得过去”的添油加醋相比，霜庭云花的“二创”会更不自然一些。</p>
<p>《ATRI》：「振れらたね、恋は見切りが肝心だよ」被拒绝了呢（实际上应该是 “被甩了呢“; ヒューマンノイド(humanoid) -&gt; 类人机器？ （译为”仿生人“ 要自然的多）；「さっき、外だからね...」-&gt; 刚刚义腿错位了（直译：刚才（义肢）脱落了。）</p>
<p>《不时以俄语遮羞的邻桌艾莉同学》：「馬鹿じゃないの？」你有病吗？(相比：”你是笨蛋吗“ 攻击性更强了) ; 「俺は真面目さが取り柄といっても、過言ではない」-&gt; 不开玩笑的说，我一直都很认真好嘛？ （和“不开玩笑地说 我这人的优点就是认真”! 相比少了轻浮语气）</p>
<p>&lt;u&gt;错误有过之而无不及&lt;/u&gt;：</p>
<p>《ATRI》: 「クレーン（crane）」-&gt; 升降机×（正确为 起重机，完全不同的东西）; <em>ep1 19:21</em>「どこに隠し持ってたんだ、そのもん！」-&gt; 你从哪个地方挖出来的法律？（正确应该为：你从哪儿拿出来的那个东西？（哨子））</p>
<p>《不时以俄语遮羞的邻桌艾莉同学》：君のことはお姉ちゃんからよく聞いていてね-&gt;经常听（你）姐姐说起你呢。；</p>
<p>「いや、オタク友達と電話で二時間ほど..」-&gt; 在家和朋友打电话打了两个小时（正确翻译：和宅友打电话打了两个小时）</p>
<p>当然最明显的校对错误在此：</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20241006172919941.png" alt="image-20241006172919941" /></p>
<h3>+0 桜都字幕组</h3>
<p>桜都的翻译没什么风格突出或者无意义添加的毛病。但偶尔出现的明显错误让人困惑。</p>
<p>《电锯人》： 「水道代」-&gt; 水电费× 水费√; Spy x Family:  いけすかんガキ-&gt; いけすかな‐いガキ： 没人要的小鬼× 不讨喜的小鬼 √；货币：<a href="https://dic.pixiv.net/a/%E3%83%80%E3%83%AB%E3%82%AF%28SPY%C3%97FAMILY%29">ダルク</a> 、<a href="https://dic.pixiv.net/a/%E3%83%9A%E3%83%B3%E3%83%88(SPY%C3%97FAMILY)">ペント</a>　-&gt; 刀、便士（强加理解也没必要把英美装进来..，直译为：达尔特、盘特 就好)。 通報 -&gt; 被捉（本意为：通报，通知，此处可引申为“报警”）</p>
<p>其中【孤独摇滚】的错翻漏翻灾难很严重，让我怀疑是不是同一个字幕组的作品。</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20241006175035822.png" alt="image-20241006175035822" /></p>
<p>クーポン（coupon) 可不是内存不足！是优惠券。; 「高校になったら、絶対にバンドやろんだ！」-&gt; 高中我一定要凑齐乐队成员！× 高中我一定要玩乐队！√ ； 理科室B-&gt; 社团活动室 B （一目了然的错误，而且上文说了是要“换教室”）； ないないない、08:31 精神崩壊する！-&gt; 绷不住了 （网络用语是不可以的 ！ ）；19:07 中学では”あの～”とか”おい”とか-&gt; 中学时期（中国的话用""中学""会给观众造成混淆，“初中”是正解）。以上均来自ep1。</p>
<h3>+0  澄空学园</h3>
<p>和【云光】的风格突出的选词相比，【澄空学园】的选词要更加放飞自我一些，举例有：</p>
<p>《莱莎的炼金工房》：水持ちの言うことですので。→ 水霸（直译为：管水的人）; 無理だと避けていては…→ 自暴自弃地逃避； すべては完成形のレシピを強く意識することで実現する-&gt;  レシピ “配方”翻译成了“形态”；</p>
<p>《ATRI》   ~ いずれ破綻する-&gt;总有一天会爆发（直译为：破裂  破产）；人はいろいろ事情ってもんがあるんだ ! -&gt; 我有苦衷（直译：人们有不同的情况！）；ぽんこつ-&gt; 废物x （直译：废品）；humanoidを置いとく-&gt; 养这个仿生人; 高性能-&gt; 我的性能这么高强</p>
<p>以上这些这些”小创新“有很多不适感，但也不至于让观众理解错误剧情，毕竟翻译水平还是过关的。</p>
<p><img src="https://cfr2-img.flynncao.uk/20241014004755.png" alt="" /></p>
<p>（《请问您今天要来点兔子吗？》S2 EP1，谁会“注入”咖啡杯啊！）</p>
<p>但在<strong>16bit的感动</strong>中翻译和文风都很不错，推荐。</p>
<h3>-1 云光字幕组</h3>
<p>和【桜都】类似，【云光】的个人风格没有太突出，但在翻译上有时候的不准确或选词大胆颇影响观感甚至酿成错误。</p>
<p>具体到迷宫饭有：具材-&gt; 食物 x 食材 o; でも妹を助けたい気持ちに偽りはないんだ。-&gt; 帮助妹妹的心情不是假的×  救助妹妹的心情不是假的； へたに沿うって丸くきって -&gt; 茎× 蒂√。&lt;del&gt;非要说错误也可以不算做错误&lt;/del&gt;del&gt;</p>
<p>但在这季新番俄语艾莉同学里选词问题就暴露无遗了：</p>
<p>(ep1 11:38)！公私混同 -&gt; 假公济私；这两个语气是不一样的，“公私不分”是准确的，强调的是边界而非牟利等。</p>
<p>而「<a href="https://hinative.com/questions/17827458">今日は雪でもふるのかしら</a> 」（怕不是要下雪了）这句熟语不翻译的话是会损失本意的，只推荐翻译成“太阳从西边出来了”。</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20241006230452301.png" alt="image-20241006230452301" /></p>
<p>另外还有一些可能会有争议的网络化、圈子话的翻译风格，只能让观者自行鉴赏了：</p>
<p>氪金、重氪玩家（是网络用语但已经被使用很久了）、胖次（直接引用日语空耳）、日常发癫、攻略、クソみたい、既に残念な脳=脑残、ドM-&gt; 抖M。</p>
<p>我认为这样的翻译风格和走向会让看番的观感渐渐变差。</p>
<h3>-1 亿次研同好会</h3>
<p>敷衍、自由，这是我鉴赏过亿次研同好会数个作品的感想。</p>
<p>从一张图三个错误开始：唐辛子也是日语汉字，”甜椒“在句子中无中生有，パセリ（parsley） → 芫荽（也就是香菜， coriander） ，但正确翻译是欧芹或者香芹）:</p>
<p><img src="https://cfr2-img.flynncao.uk/20241014000653.png" alt="" /></p>
<ul>
<li>本剧中大量的自由发挥达到了巅峰：</li>
</ul>
<p>《能干的猫今天也忧郁》：かまうものか！→ 谁他妈在乎；今天的晚饭是什么，我想哈啤！ -&gt;&gt;&gt;&gt;&gt; 毎日ミーティングする必要なくない？→ 每天都要开死鬼多会有必要吗?（翻译没错但是这 种表达方式很诡异）； 疲労やストレスが溜まっている积劳累疾; お日様→ 太阳大人；手作り→ 手作点心（？） ；22:13 体組成計→ 身体成分组成体重计 （翻译成了恐怖的东西了，其实只是“体脂秤”而已）&gt;&gt;&gt;&gt;&gt; 22:51 健康診断 もうすぐなのに~→ 这么快就要健康检查了 x 就快要体检了 o （害怕自己体重暴露）</p>
<p>《終末トレインどこへいく》中也是能一眼能看出的“自由”： 史上最速-&gt; 超级速度；idea-&gt; 主意； ~きく放送です-&gt; 到达广播；お役所-&gt; 官僚；人探し-&gt; 找她；中途半端なところで..-&gt; 半途而废到关键点；新闻学学的；完全に出遅れた.. -&gt; 大器晚成；ネガキャンー＞黑粉诽谤。</p>
<ul>
<li>没到影响理解剧情的程度？可能只是没有选择到对的番剧：</li>
</ul>
<p>《恋语轻唱》中抛开 「あれ？お姉ちゃんって軽音部だよね？なのに帰宅部なの？」-&gt; 你的姐姐是轻音部的吧？但她确是回家了的？× (前面用了“回家部”一说后面却直接开始描述) 不谈，</p>
<p>直到下文这里，感情完全变了 。这部剧的翻译质量不说，但这集可以宣告死亡了。</p>
<p>「一目惚れって、私に恋をしたんじゃなくて」-&gt; 一见钟情什么的，对我不是什么【恋爱】的情感 ×</p>
<p>一见钟情什么的，原来不是喜欢上我。√ （给我好好阅读理解啊混蛋！）</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20241007004339497.png" alt="image-20241007004339497" /></p>
<h2>未来计划</h2>
<p>另外受限于篇幅或者取材而未测评或者比较的字幕组，未来有条件的话也可能补充漫猫字幕组、动漫国字幕组、豌豆字幕组、雪飘（FLSnow)、极影字幕组。</p>
<p>测评哔哩哔哩、巴哈姆动画疯和Netflix等版权方提供的翻译优先级会更高一些。</p>
<h2>结论（TL; DR!）</h2>
<p>大部分的汉化组能保证相当水准的直译，“赛翻”在我测评的字幕组中几乎看不到，网络用语或流行语用的也相当少。用【喵萌奶茶屋】和【巴哈姆】作为直译的参考是没有问题的，考虑两岸的语言写法用法略有差异，喵萌奶茶屋是首选。（以下：📚 代表双语字幕）</p>
<p>在具体的语法问题上，少有汉化组能做到完全不犯错，但这点在容许范围内。比起这个，汉化组的中文遣词造句、转化、精简、选词和套用俗语成语惯用语反而是质量差异的关键。</p>
<p><strong>翻译句子只要足够简洁，表达到相同的意思并不难。但很多时候译者的取舍最终会让译句走向的锦上添花、画蛇添足、自作多情的三条路中的一个。</strong> 曾经我以为做翻译日语够好就可以了，但现在看来成品更考验译者的中文水平。</p>
<p>漏翻错翻带来的不仅仅是曲解，推理的信息遗漏、感情气氛的传达甚至对观者了解人物的塑造的过程都会天差地别。</p>
<p><strong>现在给出中文字幕组的综合评分，0为有直译水准（可看），-1为不推荐，-2为请极力避免，+2为无脑入，+1为上下限差异高 (翻车少，比直译强) ， -1 为上下限差异高（翻车多，宁可选直译）</strong></p>
<p>+2: 📚 SweetSub（翻译教科书）, 千夏字幕组（绝大部分都是精品）</p>
<p>+1： 📚 喵萌奶茶屋（完全能看，少数精品），📚 拨雪寻春（文风偏古，但功底很好）</p>
<p>+0：📚北宇治（水平参差不齐），巴哈姆（官方翻译，直译为主）、📚诸神字幕组（不够细心）、📚霜庭云花（ 用力过猛 不够精炼),  桜都字幕组 （大部分作品接近直译水平），澄空学园 （有限度的自由发挥）</p>
<p>-1: 📚 云光字幕组（风格太主观），亿次研同好会 (自由、懒散)</p>
<p>另外，翻译也不是唯一决定字幕组选择的要素，额外注释、字体、特效、压制质量等要素也可以加入考量。</p>
<p>字幕组作为当代的“普罗米修斯”牺牲自己的时间金钱甚至安危来做翻译是一件伟大的事情，作为曾经看人人、鼠绘、枫雪等民间字幕组的美剧日漫长大的我也报有很强烈的感激之心🙇‍，但即使为爱发电也分兢兢业业或是敷衍了事。本文的目的不是将字幕组以短短数集的表现来一分高下，我花费的时间和字幕组成员一个季度甚至一年排期所花费的心血相比九牛一毛。</p>
<p>如果通过这篇文章能让不懂日语的人也提升一些甄别翻译准确性、感受到字幕组的用心或敷衍的能力，进而领会原作者或脚本家的的辛勤工作，那么也达到了我的预期目的。</p>
<h2>修改日志</h2>
<table>
<thead>
<tr>
<th>日期</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>2024/10/8</td>
<td>参考班友 Aeroblast的建议，将文章中的机器翻译替换为ChatGPT (4o)的版本。去掉关于「知り合い」暂且搁置为，「ミルクキャラメル」增加进一步的解释说明。【霜庭云花】修正错误：「～二時間ほど」-&gt; 应该为长度的2小时。</td>
</tr>
<tr>
<td>2024/10/9</td>
<td>参考匿名网友JRY的建议，修改了初版错别其和句子不通顺问题。</td>
</tr>
<tr>
<td>2024/10/10</td>
<td>参考【拨雪寻春】翻译火树银花和BGM网友Aeroblast的解释和意见修改了“牛奶焦糖“的部分，另外对夏日重现的OP歌词做了进一步补充。（在拨雪寻春测评结果中以“译者”代指）</td>
</tr>
<tr>
<td>2024/10/11</td>
<td>将所有文章配图一并迁移到了第三方图床。</td>
</tr>
<tr>
<td>2024/10/12</td>
<td>将引用注释搬运到了正文中便于查阅。</td>
</tr>
<tr>
<td>2024/10/13</td>
<td>对澄空学园和亿次元进行了更细致的测评，下调了“云歌字幕组”的评分。</td>
</tr>
<tr>
<td>2024/10/14</td>
<td>一期完工。</td>
</tr>
<tr>
<td>2024/10/15</td>
<td>参考匿名网友JRY的建议，修改ChatGPT-4o的描述为ChatGPT (4o)，纠正了下部分语病和标点符号。&lt;br /&gt; 统一文章只出现中文标点符号符号，是字幕组原句的除外。&lt;br/&gt;将文章中出现的日文番剧标题都替换为中文标题（有差异的可以查询“按字幕组测评”一章的表格对照）。</td>
</tr>
<tr>
<td>2024/10/17</td>
<td>根据班友@梧桐的建议，修正「バセリ」为「パセリ」; 移除了关于【北宇治】和【千夏】在《葬送的芙莉莲》中的测评部分。</td>
</tr>
<tr>
<td>2024/10/18</td>
<td>根据博客网友snowball留言，修改了桜都字幕组Spy X Family的「通報」的解释。</td>
</tr>
<tr>
<td>2025/01/02</td>
<td>修正《葬送的芙莉莲》为官方名称，完整评测了喵萌、千夏、北宇治在本番上半部的表现。综合排名暂时不变。</td>
</tr>
</tbody>
</table>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[现代前端中的Sass]]></title>
            <link>https://flynncao.uk/posts/sass-new/</link>
            <guid isPermaLink="false">https://flynncao.uk/posts/sass-new/</guid>
            <pubDate>Tue, 02 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[如何将scss/sass融入你熟悉的前端框架中？这可能是一个指南 原文 最近，我发现了一个项目，实现了詹姆斯·克利尔的著名书籍《原子习惯》中...]]></description>
            <content:encoded><![CDATA[<p>如何将scss/sass融入你熟悉的前端框架中？这可能是一个指南</p>
<p><a href="/en/posts/sass-new/">原文</a></p>
<p>最近，我发现了一个<a href="https://github.com/0xAliRaza/habitly">项目</a>，实现了詹姆斯·克利尔的著名书籍《原子习惯》中提到的方法论；我成功地将所有软件包更新到最新版本以使其正常运行。</p>
<p>老实说，从vue-cli切换到vite非常顺利，因为在大版本中语法没有太大变化。然而，我遇到了一些与Bootstrap和Sass相关的错误。</p>
<p>Sass官方指出<a href="https://github.com/sass/sass/blob/main/accepted/module-system.md#timeline"><code>@import</code>规则将在不久的将来被弃用</a>；这意味着我们需要在项目中使用@use和@forward。那么@use和@forward的规则是什么呢？</p>
<h2><code>@use</code></h2>
<p>我们每天都在处理ES6标准的<strong>模块</strong>和导出。想象一下，有几个模块如“colors”、“fonts”和“mixins”。将它们全部以下划线开头定义，如<code>_colors.scss</code>。</p>
<pre><code>// ./src/scss/colors.scss
$primary-color: #38f;
$secondary-color: #eee;
$flat-black: #333;
</code></pre>
<p>如何使用它？</p>
<p>在另一个文件中，通常是你想在<code>index.html</code>中链接的文件。<code>@use "colors"</code>将加载此样式表模块中定义的所有<strong>成员</strong>。但我们不能直接使用它；在访问它们时需要一个<strong>命名空间</strong>前缀。默认情况下是模块名；你可以使用“as”关键字重命名它。</p>
<blockquote>
<p>成员在SASS语言中指“mixins”、“变量”和“函数”。</p>
</blockquote>
<pre><code>// ./src/scss/styles.scss
@use "./variables/colors" as c;
body{
 background-color: c.$secondary-color;
}
</code></pre>
<p>类似地，包含其他模块也非常容易：</p>
<pre><code>// ./src/scss/styles.scss
@use "card";
@use "colors" as c;
@use "variables/fonts"; // 等于`@use "variables/fonts" as fonts`

$transition:all 0.5s ease-in-out;

body{
  font-size:fonts.$font-size;
  background-color: c.$secondary-color;
}
h1{
 color:c.$primary-color;
}
</code></pre>
<p>你可以通过将命名空间分配给<code>*</code>使此过程更简单。</p>
<pre><code>@use "colors" as *;

h1{
 color:$primary-color;
}
</code></pre>
<p>注意：</p>
<ul>
<li>样式表的<code>@use</code>规则必须在除<code>@forward</code>之外的任何规则之前，包括<a href="https://sass-lang.com/documentation/style-rules">样式规则</a>。</li>
<li><code>@use</code>每次只加载每个文件一次。</li>
<li><code>@use</code>导入的变量可以被重写，并在所有模块中生效。你可以通过在任何地方添加<code>!default</code>标志来设置初始值。</li>
</ul>
<h2><code>@forward</code></h2>
<p><code>@forward</code>规则将加载Sass样式表中的所有变量、mixins和函数，并在通过<code>@use</code>在另一个样式表中加载时使其可用。</p>
<p>典型的场景是管理一个文件夹内的不同模块，并在另一个样式表中一次性导入它们。</p>
<p>假设我们在以下路径中有两个模块<code>colors</code>和<code>fonts</code>。</p>
<pre><code>// ./src/scss/variables/_fonts.scss
$font-size:1.5rem;
$font-weight:bold;
</code></pre>
<pre><code>// ./src/scss/variables/_colors.scss
$primary-color: #38f;
$secondary-color: #eee;
$flat-black: #333;

</code></pre>
<p>然后我们在<code>variables</code>文件夹下创建一个名为<code>_index.scss</code>的新文件，使用<code>@forward</code>规则，前两个模块中的<strong>成员</strong>将在你使用<code>@use</code>时加载。</p>
<pre><code>// ./src/scss/variables/_index.scss
@forward "colors";
@forward "fonts";
</code></pre>
<pre><code>@use "card";
@use "mixins" as *;
@use "./variables" as v;

$transition:all 0.5s ease-in-out;

body{
  font-size:v.$font-size;
  background-color: v.$secondary-color;
}
h1{
 color:v.$primary-color;
}

</code></pre>
<p>等于：</p>
<pre><code>@use "card";
@use "mixins" as *;
@use "./variables" as *;

$transition:all 0.5s ease-in-out;

body{
  font-size:$font-size;
  background-color: $secondary-color;
}
h1{
 color:$primary-color;
}
</code></pre>
<p>不过，这些成员在你的模块中不可用。如果你尝试使用<code>@forward</code>加载的变量，会发生错误。</p>
<pre><code>@forward "colors";
@forward "fonts";

.box{
 color: colors.$color-primary;
 font-family: fonts.$font-primary;
}
// 错误：没有名为"colors"的模块
</code></pre>
<h2>与Vue3+Vite配合使用</h2>
<p>我们仍然可以在vite.config.js设置中添加预处理器选项，以在目标语言的每个样式内容中注入额外的代码。</p>
<blockquote>
<p><a href="https://github.com/vitejs/vite/issues/832">https://github.com/vitejs/vite/issues/832</a></p>
</blockquote>
<pre><code>// vite.config.js
export default defineConfig({
    ...,
     css: {
  preprocessorOptions: {
    scss: {
      additionalData: `@use "@/assets/scss/global" as *;`,
    },
  },
 },
})
</code></pre>
<pre><code>// /src/assets/scss/_variables.scss
$color-primary: #0074d9;
$color-secondary: #7fdbff;
$color-tertiary: #39cccc;
</code></pre>
<p><code>global</code>模块将在使用<code>@use</code>时加载其所有成员以及<code>variables</code>和<code>mixins</code>中的成员。</p>
<pre><code>// /src/assets/scss/_global.scss
@forward "variables";
@forward "mixins";

$font-roboto: "Roboto", sans-serif;
</code></pre>
<p>由于我们最终移除了命名空间，我们可以在任何想要的组件中直接使用这些模块的所有成员：</p>
<pre><code>&lt;script setup&gt;
 ...
&lt;/script&gt;

&lt;template&gt;
  ...
&lt;/template&gt;

&lt;style lang="scss" scoped &gt;
h1{
 color:$color-primary;
    font-family: $font-roboto;
}
&lt;/style&gt;

</code></pre>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[为什么CSS的元素难以对齐？]]></title>
            <link>https://flynncao.uk/posts/css-layout/</link>
            <guid isPermaLink="false">https://flynncao.uk/posts/css-layout/</guid>
            <pubDate>Mon, 06 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[由前端强迫症引发的研究和思考 在很多年的模糊记忆后，我终于静下心来整理关于CSS Layout的思路。起因是今天在排布一些容易的盒子时浪费了...]]></description>
            <content:encoded><![CDATA[<p>由前端强迫症引发的研究和思考</p>
<p>在很多年的模糊记忆后，我终于静下心来整理关于CSS Layout的思路。起因是今天在排布一些容易的盒子时浪费了我不少时间，表明我对CSS的概念仍然存在漏洞。在position系统已经不常用的今天，我们以<code>TailwindCSS</code>为基础来疏通一下一些概念和应用。</p>
<h2>Flexbox引发的思考</h2>
<blockquote>
<p>参考：<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a></p>
</blockquote>
<blockquote>
<p>The main idea behind the flex layout is to give the container the  ability to alter its items’ width/height (and order) to best fill the  available space (mostly to accommodate to all kind of display devices  and screen sizes)</p>
</blockquote>
<p>flexbox是相对之前未出现的固定大小的容器（例如固定200px宽100px高的容器，那么很显然只能依据定位来排布元素，而现在Responsive Design已经成为行业标准的今天这一点早就不适用了）</p>
<p>TailwindCSS的另外一个好处是根据rem来确定了元素大小，这在调整，也让网页设计存在更好的发挥空间。</p>
<p>OK，那么rem又是什么？通过google我们可以轻易得出屏幕的默认字体大小是16px。</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20231106164134442.png" alt="image-20231106164134442" /></p>
<p>而TailwindCSS的基准1=0.25rem, 我们设这个单位符号为T，那么<code>1T=0.25*16px=4px</code>而 <code>4T=1rem</code>。也就是4个tailwindcss的单位才能得到一个标准的字体大小。我们修改每个盒子的宽度为4*3=12T，高度为<code>4*2=8T</code>应该每个盒子都能放下两行abc。注意，此处为了展示标准大小，我们需要加上<code>break-words</code>属性强行让用户看到不连续的单词，即字符根据盒子边界插入换行。</p>
<p>但结果和我们想象的不一样，盒子大小的确是<code>16*3=48</code>px，但这里不止三个英文字符了，换中文看看？</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20231106165106333.png" alt="image-20231106165106333" /></p>
<blockquote>
<p>参考:</p>
<p><a href="https://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align">https://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align</a></p>
<p><a href="https://juejin.cn/post/6971673576017494053?from=search-suggest#heading-5">https://juejin.cn/post/6971673576017494053?from=search-suggest#heading-5</a></p>
</blockquote>
<h2>行高和字体大小的CSS表现？</h2>
<p>我们搬出字体审阅工具<strong>fontforge</strong>来查看具体单个字符的设计大小</p>
<p>TIMES NEW ROMAN字体如图：(em units=2048)</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20231106182446978.png" alt="image-20231106182446978" /></p>
<p>Catamaran的参数如图（em units=1000)</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20231107001516474.png" alt="image-20231107001516474" /></p>
<p>如果是Windows系统，请使用<code>win ascent</code>, <code>win descent</code>, <code>typo line gap</code>三个参数，如果是Mac系统请使用<code>HHead Ascent</code>, <code>HHead Descent</code> 和<code>HHead Line Gap</code>三个参数来表示下文所说的<code>ascent</code>, <code>descent</code>, <code>line gap</code>三个数值。</p>
<p>这里有一个重要误解（稍后笔者会对其他软件进行测试）：CSS中的line-height并不等于两个字体间baseline的距离。</p>
<p><img src="https://cfr2-img.flynncao.uk/image-20231106203734020.png" alt="image-20231106203734020" /></p>
<p>而根据大多数的字体测试，content-area(即纯粹字体会被染色的背景区域，非字体本身上下框线)是多于字体标准大小（如这里的16px）的。</p>
<p>因此line-height:1会导致；而<code>line-height:normal</code>在fontforge软件中<code>line gap</code>为0的情况下，使得<code>line-height</code>=<code>content-area</code>。这时候如果没有其他阻碍，外层盒子的高度就是<code>line-height</code>。</p>
<blockquote>
<p>如果是line-gap不为0的字体（非常少见），line-gap的高度会被平均地添加到两行染色区域之间的间隙，导致line-height和content-area不等。</p>
</blockquote>
<p>到今天为止，通过生成和字体同大小的图标，我们也无需费心解决图标和文字的对齐问题。在<a href="https://github.com/unocss/unocss">UnoCSS</a>加持下，只需要一两行代码：</p>
<pre><code>&lt;div flex text-100px&gt;
    &lt;div i-carbon-logo-github /&gt;
    &lt;p&gt;Majimay&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p><img src="https://cfr2-img.flynncao.uk/image-20231106232522276.png" alt="image-20231106232522276" /></p>
<p>（按baseline对齐)</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[词汇量暴涨秘籍：用「小白书」无痛突破10000+高级英语词汇]]></title>
            <link>https://flynncao.uk/posts/word-power-made-easy-zh/</link>
            <guid isPermaLink="false">https://flynncao.uk/posts/word-power-made-easy-zh/</guid>
            <pubDate>Sat, 13 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[原始文章迁移自Xlog. 这是一篇靠谱的Word Power Made Easy （小白书）解析，记录了我几个月阅读、学习和使用的过程和心...]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>原始文章迁移自Xlog.</p>
</blockquote>
<p>这是一篇靠谱的Word Power Made Easy （小白书）解析，记录了我几个月阅读、学习和使用的过程和心得体会。</p>
<p>前一段大概用网站测了下词汇量(vocabulary.com8700,扇贝13000)，和成年native还相去甚远。课堂上的东西倒是能应付，但是对付我的论文可能有些捉襟见肘了。（<s>我是grammarly重度用户</s>chatgpt是最好的英语老师）</p>
<p>这本书可以认为是“经济学入门” “C语言基础” “艺术的故事” “人类通史”这种入门书。<strong>不要期待看完你就会词汇量从3000变成7000,7000变成10000，10000变成20000，只要你能在每个测试中都获得比较高的分数，代表它已经有用了。</strong></p>
<p>具体怎么应用我会慢慢分享，现在我们专注怎么“读”这本书。</p>
<h2>词根知识</h2>
<p>词根（root，root word）又称语根、根词[1]，是基本构词的基本词素，与词缀相对并携带主要词汇信息。</p>
<p>词根有两种，能够独立构词的为自由词根（free root），必须与其他词素组合构词的是黏着词根（bound root）。</p>
<h2>什么时候需要这本书？</h2>
<p>构词的前提是你对足够数量的单词足够熟悉，不然会出现用@#@#%找A&amp;**@!#的尴尬境地。我认为至少过了国内英语CET6再考虑这本，当然已经考过雅思托福PTE之类的出国考试更好。</p>
<p>本书的前两个章节是考试章节，如果结果是below average作者给出的建议是好好再考虑下，如果是average及以上就推荐可以推进了。</p>
<h2>如何使用？</h2>
<p>以下是我的方法：</p>
<ul>
<li>每天至少推进一个session</li>
<li>每一个字都要读下来</li>
<li>做练习，自己画词源树（后面有我画的示例）</li>
<li>复习或者回顾的时候边读边拼写（因为词根和实际的单词一定有出入）</li>
</ul>
<p>| 目前没有想着用它造句或者文章之类的，这又回到了我一开始说的问题，输出有限。</p>
<blockquote>
<p>part1结束按照上述方法得到了94/120分，失分点主要都在拼写上了..血的教训，因此还是推荐给大家加一个拼写+发音</p>
</blockquote>
<h2>如何计划？</h2>
<p>我使用<code>trello</code>来管理我的计划，之前有使用过一段时间的<code>linear.app</code>也是免费的，但完全没有移动端，体验不佳。trello比notion做项目规划的好处是自带功能足够丰富。</p>
<p>trello的教程很多，这一个用来速成是ok的：
https://www.youtube.com/watchv=6drUzoeHZkg&amp;ab_channel=Kim%26Co.byKimberlyAnnJimenez</p>
<p>这是我的卡片：</p>
<p><img src="https://cfr2-img.flynncao.uk/20230715015232.png" alt="20230715015232" /></p>
<p>后来我直接使用<code>Notion</code>来管理projects和tasks，很好用！</p>
<p>https://twitter.com/real_flynncao/status/1654741064010600453</p>
<p>配合notion<a href="https://www.notion.so/product/calendar">官方calendar</a>的工具食用更佳！</p>
<h2>具体食用方法</h2>
<h3>阅读和释义</h3>
<p>阅读是这本书最重要的环节，意味着你必须读出来作者写的每一个字。对于不知道怎么读的单词，可以先尝试自己想象读一下。然后到每章的<code>Can you pronounce the words</code>根据作者的标音读一下，例如：</p>
<table>
<thead>
<tr>
<th>单词</th>
<th>读音</th>
</tr>
</thead>
<tbody>
<tr>
<td>pedodontist</td>
<td>pee'-do-DON'-tist</td>
</tr>
</tbody>
</table>
<blockquote>
<p><code>'</code> 是次重音，<code>'</code>+大写是首重音</p>
</blockquote>
<p>然后使用词典来纠正发音，我经常使用的英英词典有：</p>
<p>剑桥：https://dictionary.cambridge.org/</p>
<p>韦氏词典：https://www.merriam-webster.com/</p>
<h3>练习和纠错</h3>
<p>如果你真的读了这本书，那你肯定顺带做完了所有练习。不要幻想有额外的练习，如果有，那就是读完作者推荐你的书，并在自己的日常生活中级积累、使用、构建你的词根和词汇。</p>
<p>但我给出了一些课后练习chatgpt加自己理解的答案，仅供参考！：</p>
<ul>
<li>Session10:
<ol>
<li><code>cacography</code>, <code>cacographic</code></li>
</ol>
</li>
<li>Session46:</li>
</ul>
<ol>
<li><code>superferior</code>, <code>superficial</code>, <code>superfluous</code>, <code>supernatural</code>, <code>supervise</code>;</li>
</ol>
<h3>词源树</h3>
<p>我把Greek雅典词源作为红色，把拉丁词源作为蓝色，把法国来源作为紫色</p>
<p>（思路是这样的：雅典是西方文明的母亲，拉丁和美洲靠近，法国有浪漫的标签，记住这些你也记住我的颜色标记法了，灰色的话是词义和词根组合随着时代发展有出入）</p>
<p>言归正传，以session10精神科从业者这一篇为例，词源树可以这么画：</p>
<p><img src="https://cfr2-img.flynncao.uk/20230715015305.png" alt="20230715015305" /></p>
<p>注意！注意！注意！不要标注中文意思。</p>
<p>如果你想看我画的每个章节完整的词源树，请看这里：(使用drawIO绘制)</p>
<p>https://drive.google.com/file/d/169vodHFGfrvv-jKUL57xWsnWZmDV9_ks/view?usp=sharing</p>
<h3>口语的音变规律</h3>
<p>Q:  这是我自己总结的一些口语规律，还是推荐你看下我的Youtube视频方便理解。
A：请注意，表音文字的文字是为口语服务的，不是口语为文字服务（这也牵扯到了最后击掌的good speller问题）。而且很多时候词汇会为口语让步或者退化（a/an在元音前的表现就是很好的例子），例如英语世界经常会用的<strong>asap=as soon as possible</strong>要读eisep而不是esesp原因是？当然是为了让人听得懂了</p>
<p>Q：那我能从这本书学到什么发音规律吗？
A： 这是我目前总结的。相信你读完也能感受到规律（我用感受是因为感受了你就真的会用了，自然而然地）。词根不是重音时或多或少会出现被部分牵连重音的情况。</p>
<ul>
<li>体现专业性或学科性的<em>ology</em> <em>logy</em>  及其接续在单词中会以最重的音来读。
如：</li>
</ul>
<pre><code>psychologist -&gt;  /saɪˈkɒl.ə.dʒɪst/
</code></pre>
<blockquote>
<p>注意，ch不是元音，因此会被元音o重化（即使ch是psyche的一部分）</p>
</blockquote>
<ul>
<li>体现职业的，以职业作为最重音：
如：</li>
</ul>
<pre><code>orthodontist -&gt; /ˌɔː.θəˈdɒn.tɪst/   [重点：dontist]
optician -&gt;/ɒpˈtɪʃ.ən/  [重点：医师]
psychiatrist -&gt; /saɪˈkaɪə.trɪst/  [重点：iatreia的人]
</code></pre>
<blockquote>
<p>optician如果你试图不重读ti发现后面也很难发力，因此最好的选择是把ti也重读（即使opti-的ti是optiko的一部分）。但有时候你会发现重音放在前面和放在后面都可以，通常这时候你查下字典就会发现，它真的有两种读音！</p>
</blockquote>
<h2>这本书有什么用？</h2>
<p>大概是让你消除对英语的一些疑虑（复杂性），让你爱上这门语言。</p>
<p>虽然听起来很怪，但英语的确是印欧语系语言入门的不二之选了。而且义务教育已经把语法体系铺垫的很好了，还有什么理由拒绝呢？</p>
<p>英语并不是一门“精确”的语言，但它确实是一门强逻辑语言，英语的精确建立在其无限的修饰之上，构词是修饰，<em>词块</em>是修饰，句子也是修饰，从句和主句也是修饰。
即使有分析的成分吗， 也是建立在层层修饰之上。</p>
<blockquote>
<p>所以为了让听话者不犯困，你需要尽可能地说出重要的成分。为了不让英语阅读者犯困，你需要在写文章的时候也应用这个规则。</p>
</blockquote>
<h2>附录：作者推荐书单</h2>
<p>https://flynncao.notion.site/Bibliomaniac-4ccbf3b25c904fbe84cb27a92891a1ae</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[浏览器插件开发简易指南]]></title>
            <link>https://flynncao.uk/posts/browser-extension-development-guide/</link>
            <guid isPermaLink="false">https://flynncao.uk/posts/browser-extension-development-guide/</guid>
            <pubDate>Thu, 04 May 2023 05:50:36 GMT</pubDate>
            <description><![CDATA[原始文章迁移自Xlog 最近想参与一个开源项目，用于moji词典的点击查询日语单词，比官方的用的顺手一些。用着还不错但发现年久失修。奇怪的...]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>原始文章迁移自Xlog</p>
</blockquote>
<p>最近想参与一个开源项目，用于moji词典的点击查询日语单词，比官方的用的顺手一些。用着还不错但发现年久失修。奇怪的是xlog的rss不能和ai总结结合在一起，这下要凑下字数了。</p>
<ul>
<li>项目地址： https://github.com/Yukaii/mojidict-helper</li>
<li>Chrome商店： https://chrome.google.com/webstore/detail/mojidict-helper/eknkjedaohafedihakaobhjfaabelkem</li>
</ul>
<p>本篇只展示Vite/Webpack+React在Chrome浏览器中的使用：</p>
<p>你可以在Chrome浏览器地址栏键入<code>chrome://extensions/</code>来查看你现在安装的所有插件，</p>
<p>请保证右上角的开发者模式是打开的。</p>
<p><img src="https://cfr2-img.flynncao.uk/202501161753496.png" alt="" /></p>
<h2>💻 开发环境</h2>
<h3>一般</h3>
<p>IDE: Visual Studio Code
React: v18+
Vite: v3+
Vite: v4.2.0
Webpack: v5.76.2</p>
<p>我使用了<code>pnpm</code>来管理本机的所有依赖，如果没有或者使用其他包管理工具的可以自行替换<code>pnpm</code>为对应命令！</p>
<h3>其他配合食用的</h3>
<ul>
<li>TailwindCSS</li>
<li>TypeScript</li>
</ul>
<h2>📦打包工具 （Module Bundler）</h2>
<h3>原生开发 （VanillaJS）</h3>
<p>直接参考官方给的这些demo即可：</p>
<p>https://github.com/GoogleChrome/chrome-extensions-samples</p>
<h3>Webpack</h3>
<p>https://github.com/lxieyang/chrome-extension-boilerplate-react</p>
<h3>Vite （推荐）</h3>
<p>https://github.com/Jonghakseo/chrome-extension-boilerplate-react-vite</p>
<p>如何使用这个库？clone后安装包依赖<code>pnpm install</code>，然后启动开发模式：</p>
<p><code>pnpm dev</code>: 这是开发模式
<code>pnpm build</code>： 这是生产模式</p>
<p>以上命令生成的代码都会在build目录下，因此只需要到<code>chrome://extension</code>目录载入一下这个目录就能边开发边看结果了：</p>
<p><img src="https://cfr2-img.flynncao.uk/202501161754179.png" alt="" /></p>
<h2>📑官方文档</h2>
<p>https://developer.chrome.com/docs/extensions/</p>
<h2>👟前置准备</h2>
<h3>生命周期</h3>
<ul>
<li>onInstalled: 安装、更新或重新加载插件触发</li>
<li>onSuspend: 插件即将被挂起触发</li>
<li>onSuspendCanceled: 插件被挂起取消时触发</li>
<li>onUpdateAvailable：插件可更新时（可以用于提醒用户）触发</li>
<li>onStartup: Chrome启动并加载扩展时触发</li>
<li>onConnect事件： 插件与Chrome的另一部分（例如内容脚本）建立连接时，将触发</li>
<li>onConnectExternal：当来自外部应用程序（例如本机应用程序）的连接建立时触发</li>
<li>onMessage： 当从Chrome的另一部分（例如内容脚本）接收到消息时，将触发onMessage事件</li>
</ul>
<p>如何在代码中使用它？</p>
<p><code>chrome.runtime.XX</code> XX为上述对应的一个生命周期名称,如：</p>
<pre><code>chrome.runtime.onInstalled.addListener((details) =&gt; {
  console.log('Extension installed:', details.reason)
})
</code></pre>
<h3>插件配置 manifest.json</h3>
<p>从这点就有很多和manifest v2版本很不同的地方，比较重要的是manifest v2的直接修改don机制被替换成service worker，大意是不用他的时候该service worker会被chrome选择性屏蔽，但我们仍然可以通过其他方式操纵dom。</p>
<blockquote>
<p>详细解释： https://developer.chrome.com/docs/extensions/mv3/service_workers/</p>
</blockquote>
<p>一个不太复杂的manifest配置文件长这样</p>
<pre><code>{
  "manifest_version": 3,
  "name": "Life Helper",
  "version": "1.0.0",
  "description": "The things we must know in our life.",
  "icons": {
    "16": "icon.png",
    "48": "icon.png",
    "128": "icon.png"
  },
  "action": {
    "default_popup": "popup.html",
    "default_title": "Popup"
  },
  "permissions": [
    "scripting",
    "bookmarks"
  ],
  "background": {
    "service_worker": "background.js"
  },
  "options_page": "options.html"
}
</code></pre>
<blockquote>
<p><code>manifest.json</code>的格式请：https://developer.chrome.com/docs/extensions/mv3/manifest/</p>
</blockquote>
<p>我们需要理解的只有</p>
<ul>
<li>
<p>permissions 开启的权限就对应了你在background.js能够调用的api，如<code>bookmarks</code>说明你可以用  <a href="https://developer.chrome.com/docs/extensions/reference/runtime/">chrome.runtime</a> 下面的方法</p>
</li>
<li>
<p>actions 主要规定弹出层窗口的位置名称等</p>
<ul>
<li>popup 点击插件图标弹出的页面</li>
</ul>
</li>
</ul>
<p><img src="https://cfr2-img.flynncao.uk/202501161755410.png" alt="" /></p>
<ul>
<li>background 对应service_worker的承载对象，可以理解为插件后端/服务端</li>
<li>contentScript 前端脚本的位置，这里直接对应react的程序入口(app.tsx-&gt;index.tsx)，之后所有逻辑&amp;样式(popup, options, newTab) 都参照react的组织形式即可</li>
</ul>
<h2>开发流程</h2>
<p>各模块的分工如下：</p>
<p><img src="https://cfr2-img.flynncao.uk/202501161755502.png" alt="" /></p>
<p>简单来说，所有之前交由后端的工作都由<code>background</code>来完成，所有之前交由前端的都由<code>contentScript</code>负责的<code>options</code>, <code>newTab</code>, <code>popup</code>来完成。</p>
<p>这也意味着，当你想做状态管理时，也能很好地遵循原子性原则组织各自的状态（M）和样式（V）、类型（M）等。</p>
<h3>通信</h3>
<p>通信在这里并没有明确的方向性，甚至也没有文件、模块等限制，需要就用。</p>
<p>但根据我们先前规定各模块大致的工作范畴，作为前端在通讯时最好也是来沟通各组件的样式、API调用、用户事件，而后端在通讯时优先考虑更好地组织数据、构建API或执行外部请求。</p>
<p>基本格式如下：</p>
<pre><code>// 发送消息，并回调
chrome.runtime.sendMessage({ greeting: 'hello' })
  .then(response =&gt; console.log(response.farewell))
  .catch(error =&gt; console.error(error))

// 接收消息，并回调
chrome.runtime.onMessage.addListener((request, sender) =&gt; {
  console.log(sender.tab
    ? `from a content script:${sender.tab.url}`
    : 'from the extension')
  if (request.greeting == 'hello') {
    return Promise.resolve({ farewell: 'goodbye' })
  }
})
</code></pre>
<p>消息发送和接受可以筛选tab id，并指定类型，假设我们想从popup往background发送消息，并指定当前活动标签页：</p>
<h3>全局状态管理和插件数据存储</h3>
<p>快使用Redux Toolkit！</p>
<p>时至今日，原生的Redux不再被推荐，新的Redux Toolkit也可以帮助我们更好结合现有模块作出分工，有类似<code>pinia</code>的用法：</p>
<p>我们首先初始化整体的，根据先前我们的分工，这里最好在后端（即background模块）来完成初始化和服务的构建。</p>
<pre><code>//store.ts
import { configureStore } from '@reduxjs/toolkit';
import { slice1, slice2 } from './slices';

export default configureStore({
  reducer: {
    slice1: slice1.reducer,
    slice2: slice2.reducer,
  },
});
export default store;
</code></pre>
<p>对于各自的slice，定义如下：</p>
<pre><code>import { createSlice } from '@reduxjs/toolkit'

// 定义初始值
const initialState1 = {
  value: 0,
}

// 定义第一个slice
export const slice1 = createSlice({
  name: 'slice1',
  initialState: initialState1,
  reducers: {
    increment1: (state) =&gt; {
      state.value += 1
    },
    decrement1: (state) =&gt; {
      state.value -= 1
    },
  },
})
export default slice1.reducer
</code></pre>
<h3>和chrome.storage结合保证状态持久</h3>
<p>这里需要安装两个库<code>redux-persist-storage-chrome</code>和<code>redux-persist</code>，然后做如下改动：</p>
<p>在<code>store.ts</code>中改动如下：</p>
<pre><code>import { configureStore } from '@reduxjs/toolkit'
import { persistReducer } from 'redux-persist'
import { chromeStorage } from 'redux-persist-storage-chrome'
import { slice1, slice2 } from './slices'

const persistConfig = {
  key: 'chrome-extension-extended',
  storage: chromeStorage,
}

export const store = configureStore({
  reducer: {
    slice1: persistReducer(persistConfig, slice1.reducer),
    slice2: persistReducer(persistConfig, slice2.reducer),
  },
})

export default store
</code></pre>
<h2>调试</h2>
<p>如果你使用了HMR或者其他形式的热重载， 应该要关心的就只是background或contentScript本身发出的消息。</p>
<ul>
<li>监视background脚本的方法：</li>
</ul>
<p>在<code>chrome://extensions/</code>页的插件程序直接点击service worker，会弹出单独的调试窗口</p>
<ul>
<li>监视options, popup或者new tab等页面：</li>
</ul>
<p>直接在对应的页面<code>右键-&gt;inspect</code> ，会弹出单独的调试窗口</p>
<h2>总结</h2>
<p>这篇给完全没接触过浏览器插件的小伙伴做一个快速指南，其实我也是刚入门，不过好在官方给了很多sample，网上也有大量的现成教程和boilderplates来上手。</p>
<h2>预告</h2>
<p><s>下篇会尝试研究chrome-extension-boilerplate-react-vite项目的rollup和ws结合过程。（这个已经不属于插件开发的范畴了）</s></p>
<p>下篇会研究其他浏览器的插件与拓展其他boilderplate在Vue3上的使用。</p>
<p>（05/08更新：）</p>
<p><a href="https://github.com/antfu/vitesse-webext">antfu的浏览器extension模板</a>很好用。但在firefox上行不通，问题在于web-ext且<a href="https://github.com/mozilla/web-ext/issues/2532">Firefox浏览器对manifestV3的支持仍不稳定</a>。</p>
<p>（06/01更新：）</p>
<p>经评论区Diy.God推荐了浏览器拓展专用的SDK （用来帮助整合资源和打包的引擎，这样前端写写写就好了）尝试下发现很好用，<a href="https://github.com/PlasmoHQ/plasmo">plasmo</a> 。可以覆盖上面提到所有boilerplate template的功能le，推荐！</p>
<h2>🧩参考</h2>
<p>https://dev.to/anobjectisa/how-to-build-a-chrome-extension-new-manifest-v3-5edk</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue的NextTick用法及JavaScript异步原理]]></title>
            <link>https://flynncao.uk/posts/vue-nexttick-and-javascript-async-mechanism/</link>
            <guid isPermaLink="false">https://flynncao.uk/posts/vue-nexttick-and-javascript-async-mechanism/</guid>
            <pubDate>Fri, 06 Aug 2021 20:18:20 GMT</pubDate>
            <description><![CDATA[在JavaScript中，对于某一确定的函数内，可以按优先级分为以下三种：1、同步任务 2、伪同步任务(nextTick) 3、异步任务（s...]]></description>
            <content:encoded><![CDATA[<h1>vue的nextTick函数及JavaScript异步原理</h1>
<h2>优先级</h2>
<p>在JavaScript中，对于某一确定的函数内，可以按优先级分为以下三种：</p>
<p>1、同步任务</p>
<p>2、伪同步任务(nextTick)</p>
<p>3、异步任务（setTimeout、promise（microtask queue）、setTimeout、MutationObserver、DOM事件、Ajax等）</p>
<p>相关材料：<a href="https://www.cnblogs.com/hity-tt/p/6729118.html">vue nextTick深入理解－vue性能优化、DOM更新时机、事件循环机制 - 蒲公英tt - 博客园 (cnblogs.com)</a></p>
<p>这个例子中在控制台的输出结果如图：</p>
<p><img src="https://cfr2-img.flynncao.uk/2282342-20210806180715143-861308543.png" alt="" /></p>
<p>系统总会先执行某一个上下文中的同步任务，然后再考虑伪同步任务和异步任务，</p>
<p>另外，总结的规则如下：
　　　　　　a、在同一事件循环中，只有所有的数据更新完毕，才会调用nextTick；</p>
<p>b、仅在同步执行环境数据完全更新完毕，DOM才开始渲染，页面才开始展现；</p>
<p>c、在同一事件循环中，如果存在多个nextTick，将会按最初的执行顺序进行调用；</p>
<p>从用例1+用例4得出：</p>
<p>d、从同步执行环境中的四个tick对应的‘li’数量均为30000可看出，同一事件循环中，nextTick所在的视图是相同的；</p>
<p>从用例2得出：</p>
<p>e、只有同步环境执行完毕，DOM渲染完毕之后，才会处理异步callback</p>
<p>从用例3得出：</p>
<p>f、每个异步callback最后都会处在一个独立的事件循环中，对应自己独立的nextTick;</p>
<p>从用例1结论中可得出：</p>
<p>g、这个事件环境中的数据变化完成，在进行渲染［视图更新］，可以避免DOM的频繁变动，从而避免了因此带来的浏览器卡顿，大幅度提升性能；</p>
<p>从b可以得出：</p>
<p>h、在首屏渲染、用户交互过程中，要巧用同步环境及异步环境；首屏展现的内容，尽量保证在同步环境中完成；其他内容，拆分到异步中，从而保证性能、体验</p>
<h2>Vue3环境测试</h2>
<p><code>nextTick</code>在Vue3中也是一种微任务，和DOM更新、异步函数等等一样。但不意味着他们在同一个任务内，请看测试：</p>
<pre><code>const purchase = async (price) =&gt; {
  setTimeout(() =&gt; {
    console.log('Wait 0 seconds.')
    console.log('setTimeout', document.querySelector('#currentBalance').innerHTML)
  }, 0)
  balance.value -= getRealPrice(price)
  console.log('Purchase successful!')
  
  await nextTick(() =&gt; {
    console.log('Wait for next tick.')
    datetime.value = new Date().toLocaleString()
    console.log('nextTick', document.querySelector('#currentBalance').innerHTML)
  })
}
</code></pre>
<p>输出结果为：</p>
<pre><code>Purchase successful!
AboutView.vue:22 Wait for next tick.
AboutView.vue:24 nextTick 497.76
AboutView.vue:15 Wait 0 seconds.
AboutView.vue:16 setTimeout 497.76
</code></pre>
<p>如果将NextTick函数提前到<code>balance.value -= getRealPrice(price)</code>这行（下令修改DOM）之前，无论加不加<code>await</code> 都会得到：</p>
<pre><code>Purchase successful!
AboutView.vue:22 Wait for next tick.
AboutView.vue:24 nextTick 500.00
AboutView.vue:15 Wait 0 seconds.
AboutView.vue:16 setTimeout 497.76
</code></pre>
<p>这时再加入异步函数等，优先级和其他<strong>微任务</strong>等同。例如我们按照`DOM更新-&gt;NextTick-&gt;异步函数）的顺序书写，希望结果也如此：</p>
<pre><code>const purchase = async (price) =&gt; {
  setTimeout(() =&gt; {
    console.log('Wait 0 seconds.')
    console.log('setTimeout', document.querySelector('#currentBalance').innerHTML)
  }, 0)
  balance.value -= getRealPrice(price)
  console.log('Purchase successful!')

  getMembershipDataAsync().then((data) =&gt; {
    console.log('Membership data:', data)
  })
  getExternalData().then((data) =&gt; {
    console.log('External data:', data)
  })

  getLocalData().then((data) =&gt; {
    console.log('Local data:', data)
  })

  nextTick(() =&gt; {
    console.log('Wait for next tick.')
    datetime.value = new Date().toLocaleString()
    console.log('nextTick', document.querySelector('#currentBalance').innerHTML)
  })
}
</code></pre>
<p>上述代码的表现结果是竞速，即谁执行的快谁先输出。其中nextTick &gt; localData &gt; getMembershipDataAsync (外部request) &gt; getMembershipDataAsync (固定1s延迟) &gt; setTimeOut</p>
<blockquote>
<p>所有的async(Promise)函数只有在resolve/reject的似乎才会进入微任务队列（在之前是同步任务），因此会有了类似<code>promise.racing([promise1, promise2])</code>的错觉。</p>
</blockquote>
<blockquote>
<p>但setTimeOut本身不属于微任务，优先级较低，因此无论如何都会放到最后</p>
</blockquote>
<p>加入await关键字后按照给定的顺序执行，复合预期。</p>
<hr />
<p>完整代码请见：https://github.com/flynncao/vue3-playground/blob/nexttick-async/src/views/AboutView.vue</p>
<p>（原始地址：https://www.cnblogs.com/flynncao/p/15109874.html）</p>
<h2>参考</h2>
<p>https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</p>
<p>https://vuejs.org/api/general#nexttick</p>
]]></content:encoded>
        </item>
        <follow_challenge>
            <feedId>136404697547121664</feedId>
            <userId>65581746568685568</userId>
        </follow_challenge>
    </channel>
</rss>
